/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v1.4.2
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package co.permify.sdk.api;

import co.permify.sdk.client.ApiException;
import co.permify.sdk.model.AttributeReadResponse;
import co.permify.sdk.model.BundleRunResponse;
import co.permify.sdk.model.DataDeleteBody;
import co.permify.sdk.model.DataDeleteResponse;
import co.permify.sdk.model.DataWriteBody;
import co.permify.sdk.model.DataWriteResponse;
import co.permify.sdk.model.DeleteRelationshipsBody;
import co.permify.sdk.model.ReadAttributesBody;
import co.permify.sdk.model.ReadRelationshipsBody;
import co.permify.sdk.model.RelationshipDeleteResponse;
import co.permify.sdk.model.RelationshipReadResponse;
import co.permify.sdk.model.RelationshipWriteResponse;
import co.permify.sdk.model.RunBundleBody;
import co.permify.sdk.model.Status;
import co.permify.sdk.model.WriteRelationshipsBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for DataApi
 */
@Ignore
public class DataApiTest {

    private final DataApi api = new DataApi();

    
    /**
     * run bundle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bundleRunTest() throws ApiException {
        String tenantId = null;
        RunBundleBody body = null;
        BundleRunResponse response = 
        api.bundleRun(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * read attributes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataAttributesReadTest() throws ApiException {
        String tenantId = null;
        ReadAttributesBody body = null;
        AttributeReadResponse response = 
        api.dataAttributesRead(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * delete data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataDeleteTest() throws ApiException {
        String tenantId = null;
        DataDeleteBody body = null;
        DataDeleteResponse response = 
        api.dataDelete(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * read relationships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataRelationshipsReadTest() throws ApiException {
        String tenantId = null;
        ReadRelationshipsBody body = null;
        RelationshipReadResponse response = 
        api.dataRelationshipsRead(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * write data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataWriteTest() throws ApiException {
        String tenantId = null;
        DataWriteBody body = null;
        DataWriteResponse response = 
        api.dataWrite(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * delete relationships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipsDeleteTest() throws ApiException {
        String tenantId = null;
        DeleteRelationshipsBody body = null;
        RelationshipDeleteResponse response = 
        api.relationshipsDelete(tenantId, body);
        
        // TODO: test validations
    }
    
    /**
     * write relationships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipsWriteTest() throws ApiException {
        String tenantId = null;
        WriteRelationshipsBody body = null;
        RelationshipWriteResponse response = 
        api.relationshipsWrite(tenantId, body);
        
        // TODO: test validations
    }
    
}
