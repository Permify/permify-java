// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

public interface ExpandOrBuilder extends
    // @@protoc_insertion_point(interface_extends:base.v1.Expand)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   * @return Whether the entity field is set.
   */
  boolean hasEntity();
  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   * @return The entity.
   */
  org.permify.grpc.Entity getEntity();
  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   */
  org.permify.grpc.EntityOrBuilder getEntityOrBuilder();

  /**
   * <pre>
   * permission is the permission applied to the entity.
   * </pre>
   *
   * <code>string permission = 2 [json_name = "permission"];</code>
   * @return The permission.
   */
  java.lang.String getPermission();
  /**
   * <pre>
   * permission is the permission applied to the entity.
   * </pre>
   *
   * <code>string permission = 2 [json_name = "permission"];</code>
   * @return The bytes for permission.
   */
  com.google.protobuf.ByteString
      getPermissionBytes();

  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  java.util.List<org.permify.grpc.Argument> 
      getArgumentsList();
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  org.permify.grpc.Argument getArguments(int index);
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  int getArgumentsCount();
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  java.util.List<? extends org.permify.grpc.ArgumentOrBuilder> 
      getArgumentsOrBuilderList();
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  org.permify.grpc.ArgumentOrBuilder getArgumentsOrBuilder(
      int index);

  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   * @return Whether the expand field is set.
   */
  boolean hasExpand();
  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   * @return The expand.
   */
  org.permify.grpc.ExpandTreeNode getExpand();
  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   */
  org.permify.grpc.ExpandTreeNodeOrBuilder getExpandOrBuilder();

  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   * @return Whether the leaf field is set.
   */
  boolean hasLeaf();
  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   * @return The leaf.
   */
  org.permify.grpc.ExpandLeaf getLeaf();
  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   */
  org.permify.grpc.ExpandLeafOrBuilder getLeafOrBuilder();

  org.permify.grpc.Expand.NodeCase getNodeCase();
}
