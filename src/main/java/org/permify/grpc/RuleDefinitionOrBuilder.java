// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

public interface RuleDefinitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:base.v1.RuleDefinition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the rule, which follows a specific string pattern and has a maximum byte size.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name", (.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the rule, which follows a specific string pattern and has a maximum byte size.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name", (.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  int getArgumentsCount();
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  boolean containsArguments(
      java.lang.String key);
  /**
   * Use {@link #getArgumentsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, org.permify.grpc.AttributeType>
  getArguments();
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  java.util.Map<java.lang.String, org.permify.grpc.AttributeType>
  getArgumentsMap();
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  /* nullable */
org.permify.grpc.AttributeType getArgumentsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.AttributeType         defaultValue);
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  org.permify.grpc.AttributeType getArgumentsOrThrow(
      java.lang.String key);
  /**
   * Use {@link #getArgumentsValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getArgumentsValue();
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getArgumentsValueMap();
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  int getArgumentsValueOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * Map of arguments for this rule. The key is the attribute name, and the value is the AttributeType.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.AttributeType&gt; arguments = 2 [json_name = "arguments"];</code>
   */
  int getArgumentsValueOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The expression for this rule in the form of a google.api.expr.v1alpha1.CheckedExpr.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr expression = 3 [json_name = "expression"];</code>
   * @return Whether the expression field is set.
   */
  boolean hasExpression();
  /**
   * <pre>
   * The expression for this rule in the form of a google.api.expr.v1alpha1.CheckedExpr.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr expression = 3 [json_name = "expression"];</code>
   * @return The expression.
   */
  com.google.api.expr.v1alpha1.CheckedExpr getExpression();
  /**
   * <pre>
   * The expression for this rule in the form of a google.api.expr.v1alpha1.CheckedExpr.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr expression = 3 [json_name = "expression"];</code>
   */
  com.google.api.expr.v1alpha1.CheckedExprOrBuilder getExpressionOrBuilder();
}
