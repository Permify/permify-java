// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

/**
 * <pre>
 * Expand is used to define a hierarchical structure for permissions.
 * It has an entity, permission, and arguments. The node can be either another hierarchical structure or a set of subjects.
 * </pre>
 *
 * Protobuf type {@code base.v1.Expand}
 */
public final class Expand extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:base.v1.Expand)
    ExpandOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 2,
      /* suffix= */ "",
      Expand.class.getName());
  }
  // Use Expand.newBuilder() to construct.
  private Expand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Expand() {
    permission_ = "";
    arguments_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.permify.grpc.BaseProto.internal_static_base_v1_Expand_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.permify.grpc.BaseProto.internal_static_base_v1_Expand_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.permify.grpc.Expand.class, org.permify.grpc.Expand.Builder.class);
  }

  private int bitField0_;
  private int nodeCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object node_;
  public enum NodeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    EXPAND(4),
    LEAF(5),
    NODE_NOT_SET(0);
    private final int value;
    private NodeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static NodeCase valueOf(int value) {
      return forNumber(value);
    }

    public static NodeCase forNumber(int value) {
      switch (value) {
        case 4: return EXPAND;
        case 5: return LEAF;
        case 0: return NODE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public NodeCase
  getNodeCase() {
    return NodeCase.forNumber(
        nodeCase_);
  }

  public static final int ENTITY_FIELD_NUMBER = 1;
  private org.permify.grpc.Entity entity_;
  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   * @return Whether the entity field is set.
   */
  @java.lang.Override
  public boolean hasEntity() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   * @return The entity.
   */
  @java.lang.Override
  public org.permify.grpc.Entity getEntity() {
    return entity_ == null ? org.permify.grpc.Entity.getDefaultInstance() : entity_;
  }
  /**
   * <pre>
   * entity is the entity for which the hierarchical structure is defined.
   * </pre>
   *
   * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.EntityOrBuilder getEntityOrBuilder() {
    return entity_ == null ? org.permify.grpc.Entity.getDefaultInstance() : entity_;
  }

  public static final int PERMISSION_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object permission_ = "";
  /**
   * <pre>
   * permission is the permission applied to the entity.
   * </pre>
   *
   * <code>string permission = 2 [json_name = "permission"];</code>
   * @return The permission.
   */
  @java.lang.Override
  public java.lang.String getPermission() {
    java.lang.Object ref = permission_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      permission_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * permission is the permission applied to the entity.
   * </pre>
   *
   * <code>string permission = 2 [json_name = "permission"];</code>
   * @return The bytes for permission.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPermissionBytes() {
    java.lang.Object ref = permission_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      permission_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ARGUMENTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<org.permify.grpc.Argument> arguments_;
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  @java.lang.Override
  public java.util.List<org.permify.grpc.Argument> getArgumentsList() {
    return arguments_;
  }
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.permify.grpc.ArgumentOrBuilder> 
      getArgumentsOrBuilderList() {
    return arguments_;
  }
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  @java.lang.Override
  public int getArgumentsCount() {
    return arguments_.size();
  }
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.Argument getArguments(int index) {
    return arguments_.get(index);
  }
  /**
   * <pre>
   * arguments are the additional information or context used to evaluate permissions.
   * </pre>
   *
   * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.ArgumentOrBuilder getArgumentsOrBuilder(
      int index) {
    return arguments_.get(index);
  }

  public static final int EXPAND_FIELD_NUMBER = 4;
  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   * @return Whether the expand field is set.
   */
  @java.lang.Override
  public boolean hasExpand() {
    return nodeCase_ == 4;
  }
  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   * @return The expand.
   */
  @java.lang.Override
  public org.permify.grpc.ExpandTreeNode getExpand() {
    if (nodeCase_ == 4) {
       return (org.permify.grpc.ExpandTreeNode) node_;
    }
    return org.permify.grpc.ExpandTreeNode.getDefaultInstance();
  }
  /**
   * <pre>
   * expand contains another hierarchical structure.
   * </pre>
   *
   * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.ExpandTreeNodeOrBuilder getExpandOrBuilder() {
    if (nodeCase_ == 4) {
       return (org.permify.grpc.ExpandTreeNode) node_;
    }
    return org.permify.grpc.ExpandTreeNode.getDefaultInstance();
  }

  public static final int LEAF_FIELD_NUMBER = 5;
  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   * @return Whether the leaf field is set.
   */
  @java.lang.Override
  public boolean hasLeaf() {
    return nodeCase_ == 5;
  }
  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   * @return The leaf.
   */
  @java.lang.Override
  public org.permify.grpc.ExpandLeaf getLeaf() {
    if (nodeCase_ == 5) {
       return (org.permify.grpc.ExpandLeaf) node_;
    }
    return org.permify.grpc.ExpandLeaf.getDefaultInstance();
  }
  /**
   * <pre>
   * leaf contains a set of subjects.
   * </pre>
   *
   * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.ExpandLeafOrBuilder getLeafOrBuilder() {
    if (nodeCase_ == 5) {
       return (org.permify.grpc.ExpandLeaf) node_;
    }
    return org.permify.grpc.ExpandLeaf.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getEntity());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(permission_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, permission_);
    }
    for (int i = 0; i < arguments_.size(); i++) {
      output.writeMessage(3, arguments_.get(i));
    }
    if (nodeCase_ == 4) {
      output.writeMessage(4, (org.permify.grpc.ExpandTreeNode) node_);
    }
    if (nodeCase_ == 5) {
      output.writeMessage(5, (org.permify.grpc.ExpandLeaf) node_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getEntity());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(permission_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, permission_);
    }
    for (int i = 0; i < arguments_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, arguments_.get(i));
    }
    if (nodeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.permify.grpc.ExpandTreeNode) node_);
    }
    if (nodeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.permify.grpc.ExpandLeaf) node_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.permify.grpc.Expand)) {
      return super.equals(obj);
    }
    org.permify.grpc.Expand other = (org.permify.grpc.Expand) obj;

    if (hasEntity() != other.hasEntity()) return false;
    if (hasEntity()) {
      if (!getEntity()
          .equals(other.getEntity())) return false;
    }
    if (!getPermission()
        .equals(other.getPermission())) return false;
    if (!getArgumentsList()
        .equals(other.getArgumentsList())) return false;
    if (!getNodeCase().equals(other.getNodeCase())) return false;
    switch (nodeCase_) {
      case 4:
        if (!getExpand()
            .equals(other.getExpand())) return false;
        break;
      case 5:
        if (!getLeaf()
            .equals(other.getLeaf())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEntity()) {
      hash = (37 * hash) + ENTITY_FIELD_NUMBER;
      hash = (53 * hash) + getEntity().hashCode();
    }
    hash = (37 * hash) + PERMISSION_FIELD_NUMBER;
    hash = (53 * hash) + getPermission().hashCode();
    if (getArgumentsCount() > 0) {
      hash = (37 * hash) + ARGUMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getArgumentsList().hashCode();
    }
    switch (nodeCase_) {
      case 4:
        hash = (37 * hash) + EXPAND_FIELD_NUMBER;
        hash = (53 * hash) + getExpand().hashCode();
        break;
      case 5:
        hash = (37 * hash) + LEAF_FIELD_NUMBER;
        hash = (53 * hash) + getLeaf().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.permify.grpc.Expand parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.Expand parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.Expand parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.Expand parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.Expand parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.Expand parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.Expand parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.Expand parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.permify.grpc.Expand parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.permify.grpc.Expand parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.permify.grpc.Expand parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.Expand parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.permify.grpc.Expand prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Expand is used to define a hierarchical structure for permissions.
   * It has an entity, permission, and arguments. The node can be either another hierarchical structure or a set of subjects.
   * </pre>
   *
   * Protobuf type {@code base.v1.Expand}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:base.v1.Expand)
      org.permify.grpc.ExpandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_Expand_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_Expand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.permify.grpc.Expand.class, org.permify.grpc.Expand.Builder.class);
    }

    // Construct using org.permify.grpc.Expand.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getEntityFieldBuilder();
        getArgumentsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      entity_ = null;
      if (entityBuilder_ != null) {
        entityBuilder_.dispose();
        entityBuilder_ = null;
      }
      permission_ = "";
      if (argumentsBuilder_ == null) {
        arguments_ = java.util.Collections.emptyList();
      } else {
        arguments_ = null;
        argumentsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (expandBuilder_ != null) {
        expandBuilder_.clear();
      }
      if (leafBuilder_ != null) {
        leafBuilder_.clear();
      }
      nodeCase_ = 0;
      node_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_Expand_descriptor;
    }

    @java.lang.Override
    public org.permify.grpc.Expand getDefaultInstanceForType() {
      return org.permify.grpc.Expand.getDefaultInstance();
    }

    @java.lang.Override
    public org.permify.grpc.Expand build() {
      org.permify.grpc.Expand result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.permify.grpc.Expand buildPartial() {
      org.permify.grpc.Expand result = new org.permify.grpc.Expand(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.permify.grpc.Expand result) {
      if (argumentsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          arguments_ = java.util.Collections.unmodifiableList(arguments_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.arguments_ = arguments_;
      } else {
        result.arguments_ = argumentsBuilder_.build();
      }
    }

    private void buildPartial0(org.permify.grpc.Expand result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.entity_ = entityBuilder_ == null
            ? entity_
            : entityBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.permission_ = permission_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(org.permify.grpc.Expand result) {
      result.nodeCase_ = nodeCase_;
      result.node_ = this.node_;
      if (nodeCase_ == 4 &&
          expandBuilder_ != null) {
        result.node_ = expandBuilder_.build();
      }
      if (nodeCase_ == 5 &&
          leafBuilder_ != null) {
        result.node_ = leafBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.permify.grpc.Expand) {
        return mergeFrom((org.permify.grpc.Expand)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.permify.grpc.Expand other) {
      if (other == org.permify.grpc.Expand.getDefaultInstance()) return this;
      if (other.hasEntity()) {
        mergeEntity(other.getEntity());
      }
      if (!other.getPermission().isEmpty()) {
        permission_ = other.permission_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (argumentsBuilder_ == null) {
        if (!other.arguments_.isEmpty()) {
          if (arguments_.isEmpty()) {
            arguments_ = other.arguments_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureArgumentsIsMutable();
            arguments_.addAll(other.arguments_);
          }
          onChanged();
        }
      } else {
        if (!other.arguments_.isEmpty()) {
          if (argumentsBuilder_.isEmpty()) {
            argumentsBuilder_.dispose();
            argumentsBuilder_ = null;
            arguments_ = other.arguments_;
            bitField0_ = (bitField0_ & ~0x00000004);
            argumentsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getArgumentsFieldBuilder() : null;
          } else {
            argumentsBuilder_.addAllMessages(other.arguments_);
          }
        }
      }
      switch (other.getNodeCase()) {
        case EXPAND: {
          mergeExpand(other.getExpand());
          break;
        }
        case LEAF: {
          mergeLeaf(other.getLeaf());
          break;
        }
        case NODE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getEntityFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              permission_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              org.permify.grpc.Argument m =
                  input.readMessage(
                      org.permify.grpc.Argument.parser(),
                      extensionRegistry);
              if (argumentsBuilder_ == null) {
                ensureArgumentsIsMutable();
                arguments_.add(m);
              } else {
                argumentsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getExpandFieldBuilder().getBuilder(),
                  extensionRegistry);
              nodeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getLeafFieldBuilder().getBuilder(),
                  extensionRegistry);
              nodeCase_ = 5;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int nodeCase_ = 0;
    private java.lang.Object node_;
    public NodeCase
        getNodeCase() {
      return NodeCase.forNumber(
          nodeCase_);
    }

    public Builder clearNode() {
      nodeCase_ = 0;
      node_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private org.permify.grpc.Entity entity_;
    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.Entity, org.permify.grpc.Entity.Builder, org.permify.grpc.EntityOrBuilder> entityBuilder_;
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     * @return Whether the entity field is set.
     */
    public boolean hasEntity() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     * @return The entity.
     */
    public org.permify.grpc.Entity getEntity() {
      if (entityBuilder_ == null) {
        return entity_ == null ? org.permify.grpc.Entity.getDefaultInstance() : entity_;
      } else {
        return entityBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public Builder setEntity(org.permify.grpc.Entity value) {
      if (entityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        entity_ = value;
      } else {
        entityBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public Builder setEntity(
        org.permify.grpc.Entity.Builder builderForValue) {
      if (entityBuilder_ == null) {
        entity_ = builderForValue.build();
      } else {
        entityBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public Builder mergeEntity(org.permify.grpc.Entity value) {
      if (entityBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          entity_ != null &&
          entity_ != org.permify.grpc.Entity.getDefaultInstance()) {
          getEntityBuilder().mergeFrom(value);
        } else {
          entity_ = value;
        }
      } else {
        entityBuilder_.mergeFrom(value);
      }
      if (entity_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public Builder clearEntity() {
      bitField0_ = (bitField0_ & ~0x00000001);
      entity_ = null;
      if (entityBuilder_ != null) {
        entityBuilder_.dispose();
        entityBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public org.permify.grpc.Entity.Builder getEntityBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getEntityFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    public org.permify.grpc.EntityOrBuilder getEntityOrBuilder() {
      if (entityBuilder_ != null) {
        return entityBuilder_.getMessageOrBuilder();
      } else {
        return entity_ == null ?
            org.permify.grpc.Entity.getDefaultInstance() : entity_;
      }
    }
    /**
     * <pre>
     * entity is the entity for which the hierarchical structure is defined.
     * </pre>
     *
     * <code>.base.v1.Entity entity = 1 [json_name = "entity"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.Entity, org.permify.grpc.Entity.Builder, org.permify.grpc.EntityOrBuilder> 
        getEntityFieldBuilder() {
      if (entityBuilder_ == null) {
        entityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.permify.grpc.Entity, org.permify.grpc.Entity.Builder, org.permify.grpc.EntityOrBuilder>(
                getEntity(),
                getParentForChildren(),
                isClean());
        entity_ = null;
      }
      return entityBuilder_;
    }

    private java.lang.Object permission_ = "";
    /**
     * <pre>
     * permission is the permission applied to the entity.
     * </pre>
     *
     * <code>string permission = 2 [json_name = "permission"];</code>
     * @return The permission.
     */
    public java.lang.String getPermission() {
      java.lang.Object ref = permission_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        permission_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * permission is the permission applied to the entity.
     * </pre>
     *
     * <code>string permission = 2 [json_name = "permission"];</code>
     * @return The bytes for permission.
     */
    public com.google.protobuf.ByteString
        getPermissionBytes() {
      java.lang.Object ref = permission_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        permission_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * permission is the permission applied to the entity.
     * </pre>
     *
     * <code>string permission = 2 [json_name = "permission"];</code>
     * @param value The permission to set.
     * @return This builder for chaining.
     */
    public Builder setPermission(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      permission_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * permission is the permission applied to the entity.
     * </pre>
     *
     * <code>string permission = 2 [json_name = "permission"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPermission() {
      permission_ = getDefaultInstance().getPermission();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * permission is the permission applied to the entity.
     * </pre>
     *
     * <code>string permission = 2 [json_name = "permission"];</code>
     * @param value The bytes for permission to set.
     * @return This builder for chaining.
     */
    public Builder setPermissionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      permission_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<org.permify.grpc.Argument> arguments_ =
      java.util.Collections.emptyList();
    private void ensureArgumentsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        arguments_ = new java.util.ArrayList<org.permify.grpc.Argument>(arguments_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        org.permify.grpc.Argument, org.permify.grpc.Argument.Builder, org.permify.grpc.ArgumentOrBuilder> argumentsBuilder_;

    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public java.util.List<org.permify.grpc.Argument> getArgumentsList() {
      if (argumentsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(arguments_);
      } else {
        return argumentsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public int getArgumentsCount() {
      if (argumentsBuilder_ == null) {
        return arguments_.size();
      } else {
        return argumentsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public org.permify.grpc.Argument getArguments(int index) {
      if (argumentsBuilder_ == null) {
        return arguments_.get(index);
      } else {
        return argumentsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder setArguments(
        int index, org.permify.grpc.Argument value) {
      if (argumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentsIsMutable();
        arguments_.set(index, value);
        onChanged();
      } else {
        argumentsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder setArguments(
        int index, org.permify.grpc.Argument.Builder builderForValue) {
      if (argumentsBuilder_ == null) {
        ensureArgumentsIsMutable();
        arguments_.set(index, builderForValue.build());
        onChanged();
      } else {
        argumentsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder addArguments(org.permify.grpc.Argument value) {
      if (argumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentsIsMutable();
        arguments_.add(value);
        onChanged();
      } else {
        argumentsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder addArguments(
        int index, org.permify.grpc.Argument value) {
      if (argumentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentsIsMutable();
        arguments_.add(index, value);
        onChanged();
      } else {
        argumentsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder addArguments(
        org.permify.grpc.Argument.Builder builderForValue) {
      if (argumentsBuilder_ == null) {
        ensureArgumentsIsMutable();
        arguments_.add(builderForValue.build());
        onChanged();
      } else {
        argumentsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder addArguments(
        int index, org.permify.grpc.Argument.Builder builderForValue) {
      if (argumentsBuilder_ == null) {
        ensureArgumentsIsMutable();
        arguments_.add(index, builderForValue.build());
        onChanged();
      } else {
        argumentsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder addAllArguments(
        java.lang.Iterable<? extends org.permify.grpc.Argument> values) {
      if (argumentsBuilder_ == null) {
        ensureArgumentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, arguments_);
        onChanged();
      } else {
        argumentsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder clearArguments() {
      if (argumentsBuilder_ == null) {
        arguments_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        argumentsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public Builder removeArguments(int index) {
      if (argumentsBuilder_ == null) {
        ensureArgumentsIsMutable();
        arguments_.remove(index);
        onChanged();
      } else {
        argumentsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public org.permify.grpc.Argument.Builder getArgumentsBuilder(
        int index) {
      return getArgumentsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public org.permify.grpc.ArgumentOrBuilder getArgumentsOrBuilder(
        int index) {
      if (argumentsBuilder_ == null) {
        return arguments_.get(index);  } else {
        return argumentsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public java.util.List<? extends org.permify.grpc.ArgumentOrBuilder> 
         getArgumentsOrBuilderList() {
      if (argumentsBuilder_ != null) {
        return argumentsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(arguments_);
      }
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public org.permify.grpc.Argument.Builder addArgumentsBuilder() {
      return getArgumentsFieldBuilder().addBuilder(
          org.permify.grpc.Argument.getDefaultInstance());
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public org.permify.grpc.Argument.Builder addArgumentsBuilder(
        int index) {
      return getArgumentsFieldBuilder().addBuilder(
          index, org.permify.grpc.Argument.getDefaultInstance());
    }
    /**
     * <pre>
     * arguments are the additional information or context used to evaluate permissions.
     * </pre>
     *
     * <code>repeated .base.v1.Argument arguments = 3 [json_name = "arguments"];</code>
     */
    public java.util.List<org.permify.grpc.Argument.Builder> 
         getArgumentsBuilderList() {
      return getArgumentsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        org.permify.grpc.Argument, org.permify.grpc.Argument.Builder, org.permify.grpc.ArgumentOrBuilder> 
        getArgumentsFieldBuilder() {
      if (argumentsBuilder_ == null) {
        argumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            org.permify.grpc.Argument, org.permify.grpc.Argument.Builder, org.permify.grpc.ArgumentOrBuilder>(
                arguments_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        arguments_ = null;
      }
      return argumentsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.ExpandTreeNode, org.permify.grpc.ExpandTreeNode.Builder, org.permify.grpc.ExpandTreeNodeOrBuilder> expandBuilder_;
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     * @return Whether the expand field is set.
     */
    @java.lang.Override
    public boolean hasExpand() {
      return nodeCase_ == 4;
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     * @return The expand.
     */
    @java.lang.Override
    public org.permify.grpc.ExpandTreeNode getExpand() {
      if (expandBuilder_ == null) {
        if (nodeCase_ == 4) {
          return (org.permify.grpc.ExpandTreeNode) node_;
        }
        return org.permify.grpc.ExpandTreeNode.getDefaultInstance();
      } else {
        if (nodeCase_ == 4) {
          return expandBuilder_.getMessage();
        }
        return org.permify.grpc.ExpandTreeNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    public Builder setExpand(org.permify.grpc.ExpandTreeNode value) {
      if (expandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
        onChanged();
      } else {
        expandBuilder_.setMessage(value);
      }
      nodeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    public Builder setExpand(
        org.permify.grpc.ExpandTreeNode.Builder builderForValue) {
      if (expandBuilder_ == null) {
        node_ = builderForValue.build();
        onChanged();
      } else {
        expandBuilder_.setMessage(builderForValue.build());
      }
      nodeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    public Builder mergeExpand(org.permify.grpc.ExpandTreeNode value) {
      if (expandBuilder_ == null) {
        if (nodeCase_ == 4 &&
            node_ != org.permify.grpc.ExpandTreeNode.getDefaultInstance()) {
          node_ = org.permify.grpc.ExpandTreeNode.newBuilder((org.permify.grpc.ExpandTreeNode) node_)
              .mergeFrom(value).buildPartial();
        } else {
          node_ = value;
        }
        onChanged();
      } else {
        if (nodeCase_ == 4) {
          expandBuilder_.mergeFrom(value);
        } else {
          expandBuilder_.setMessage(value);
        }
      }
      nodeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    public Builder clearExpand() {
      if (expandBuilder_ == null) {
        if (nodeCase_ == 4) {
          nodeCase_ = 0;
          node_ = null;
          onChanged();
        }
      } else {
        if (nodeCase_ == 4) {
          nodeCase_ = 0;
          node_ = null;
        }
        expandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    public org.permify.grpc.ExpandTreeNode.Builder getExpandBuilder() {
      return getExpandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.ExpandTreeNodeOrBuilder getExpandOrBuilder() {
      if ((nodeCase_ == 4) && (expandBuilder_ != null)) {
        return expandBuilder_.getMessageOrBuilder();
      } else {
        if (nodeCase_ == 4) {
          return (org.permify.grpc.ExpandTreeNode) node_;
        }
        return org.permify.grpc.ExpandTreeNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * expand contains another hierarchical structure.
     * </pre>
     *
     * <code>.base.v1.ExpandTreeNode expand = 4 [json_name = "expand"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.ExpandTreeNode, org.permify.grpc.ExpandTreeNode.Builder, org.permify.grpc.ExpandTreeNodeOrBuilder> 
        getExpandFieldBuilder() {
      if (expandBuilder_ == null) {
        if (!(nodeCase_ == 4)) {
          node_ = org.permify.grpc.ExpandTreeNode.getDefaultInstance();
        }
        expandBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.permify.grpc.ExpandTreeNode, org.permify.grpc.ExpandTreeNode.Builder, org.permify.grpc.ExpandTreeNodeOrBuilder>(
                (org.permify.grpc.ExpandTreeNode) node_,
                getParentForChildren(),
                isClean());
        node_ = null;
      }
      nodeCase_ = 4;
      onChanged();
      return expandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.ExpandLeaf, org.permify.grpc.ExpandLeaf.Builder, org.permify.grpc.ExpandLeafOrBuilder> leafBuilder_;
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     * @return Whether the leaf field is set.
     */
    @java.lang.Override
    public boolean hasLeaf() {
      return nodeCase_ == 5;
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     * @return The leaf.
     */
    @java.lang.Override
    public org.permify.grpc.ExpandLeaf getLeaf() {
      if (leafBuilder_ == null) {
        if (nodeCase_ == 5) {
          return (org.permify.grpc.ExpandLeaf) node_;
        }
        return org.permify.grpc.ExpandLeaf.getDefaultInstance();
      } else {
        if (nodeCase_ == 5) {
          return leafBuilder_.getMessage();
        }
        return org.permify.grpc.ExpandLeaf.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    public Builder setLeaf(org.permify.grpc.ExpandLeaf value) {
      if (leafBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
        onChanged();
      } else {
        leafBuilder_.setMessage(value);
      }
      nodeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    public Builder setLeaf(
        org.permify.grpc.ExpandLeaf.Builder builderForValue) {
      if (leafBuilder_ == null) {
        node_ = builderForValue.build();
        onChanged();
      } else {
        leafBuilder_.setMessage(builderForValue.build());
      }
      nodeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    public Builder mergeLeaf(org.permify.grpc.ExpandLeaf value) {
      if (leafBuilder_ == null) {
        if (nodeCase_ == 5 &&
            node_ != org.permify.grpc.ExpandLeaf.getDefaultInstance()) {
          node_ = org.permify.grpc.ExpandLeaf.newBuilder((org.permify.grpc.ExpandLeaf) node_)
              .mergeFrom(value).buildPartial();
        } else {
          node_ = value;
        }
        onChanged();
      } else {
        if (nodeCase_ == 5) {
          leafBuilder_.mergeFrom(value);
        } else {
          leafBuilder_.setMessage(value);
        }
      }
      nodeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    public Builder clearLeaf() {
      if (leafBuilder_ == null) {
        if (nodeCase_ == 5) {
          nodeCase_ = 0;
          node_ = null;
          onChanged();
        }
      } else {
        if (nodeCase_ == 5) {
          nodeCase_ = 0;
          node_ = null;
        }
        leafBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    public org.permify.grpc.ExpandLeaf.Builder getLeafBuilder() {
      return getLeafFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.ExpandLeafOrBuilder getLeafOrBuilder() {
      if ((nodeCase_ == 5) && (leafBuilder_ != null)) {
        return leafBuilder_.getMessageOrBuilder();
      } else {
        if (nodeCase_ == 5) {
          return (org.permify.grpc.ExpandLeaf) node_;
        }
        return org.permify.grpc.ExpandLeaf.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * leaf contains a set of subjects.
     * </pre>
     *
     * <code>.base.v1.ExpandLeaf leaf = 5 [json_name = "leaf"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.permify.grpc.ExpandLeaf, org.permify.grpc.ExpandLeaf.Builder, org.permify.grpc.ExpandLeafOrBuilder> 
        getLeafFieldBuilder() {
      if (leafBuilder_ == null) {
        if (!(nodeCase_ == 5)) {
          node_ = org.permify.grpc.ExpandLeaf.getDefaultInstance();
        }
        leafBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.permify.grpc.ExpandLeaf, org.permify.grpc.ExpandLeaf.Builder, org.permify.grpc.ExpandLeafOrBuilder>(
                (org.permify.grpc.ExpandLeaf) node_,
                getParentForChildren(),
                isClean());
        node_ = null;
      }
      nodeCase_ = 5;
      onChanged();
      return leafBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:base.v1.Expand)
  }

  // @@protoc_insertion_point(class_scope:base.v1.Expand)
  private static final org.permify.grpc.Expand DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.permify.grpc.Expand();
  }

  public static org.permify.grpc.Expand getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Expand>
      PARSER = new com.google.protobuf.AbstractParser<Expand>() {
    @java.lang.Override
    public Expand parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Expand> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Expand> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.permify.grpc.Expand getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

