// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

public interface DataBundleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:base.v1.DataBundle)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * 'name' is a simple string field representing the name of the DataBundle.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * 'name' is a simple string field representing the name of the DataBundle.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * 'arguments' is a repeated field, which means it can contain multiple strings.
   * These are used to store a list of arguments related to the DataBundle.
   * </pre>
   *
   * <code>repeated string arguments = 2 [json_name = "arguments"];</code>
   * @return A list containing the arguments.
   */
  java.util.List<java.lang.String>
      getArgumentsList();
  /**
   * <pre>
   * 'arguments' is a repeated field, which means it can contain multiple strings.
   * These are used to store a list of arguments related to the DataBundle.
   * </pre>
   *
   * <code>repeated string arguments = 2 [json_name = "arguments"];</code>
   * @return The count of arguments.
   */
  int getArgumentsCount();
  /**
   * <pre>
   * 'arguments' is a repeated field, which means it can contain multiple strings.
   * These are used to store a list of arguments related to the DataBundle.
   * </pre>
   *
   * <code>repeated string arguments = 2 [json_name = "arguments"];</code>
   * @param index The index of the element to return.
   * @return The arguments at the given index.
   */
  java.lang.String getArguments(int index);
  /**
   * <pre>
   * 'arguments' is a repeated field, which means it can contain multiple strings.
   * These are used to store a list of arguments related to the DataBundle.
   * </pre>
   *
   * <code>repeated string arguments = 2 [json_name = "arguments"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the arguments at the given index.
   */
  com.google.protobuf.ByteString
      getArgumentsBytes(int index);

  /**
   * <pre>
   * 'operations' is a repeated field containing multiple Operation messages.
   * Each Operation represents a specific action or set of actions to be performed.
   * </pre>
   *
   * <code>repeated .base.v1.Operation operations = 3 [json_name = "operations"];</code>
   */
  java.util.List<org.permify.grpc.Operation> 
      getOperationsList();
  /**
   * <pre>
   * 'operations' is a repeated field containing multiple Operation messages.
   * Each Operation represents a specific action or set of actions to be performed.
   * </pre>
   *
   * <code>repeated .base.v1.Operation operations = 3 [json_name = "operations"];</code>
   */
  org.permify.grpc.Operation getOperations(int index);
  /**
   * <pre>
   * 'operations' is a repeated field containing multiple Operation messages.
   * Each Operation represents a specific action or set of actions to be performed.
   * </pre>
   *
   * <code>repeated .base.v1.Operation operations = 3 [json_name = "operations"];</code>
   */
  int getOperationsCount();
  /**
   * <pre>
   * 'operations' is a repeated field containing multiple Operation messages.
   * Each Operation represents a specific action or set of actions to be performed.
   * </pre>
   *
   * <code>repeated .base.v1.Operation operations = 3 [json_name = "operations"];</code>
   */
  java.util.List<? extends org.permify.grpc.OperationOrBuilder> 
      getOperationsOrBuilderList();
  /**
   * <pre>
   * 'operations' is a repeated field containing multiple Operation messages.
   * Each Operation represents a specific action or set of actions to be performed.
   * </pre>
   *
   * <code>repeated .base.v1.Operation operations = 3 [json_name = "operations"];</code>
   */
  org.permify.grpc.OperationOrBuilder getOperationsOrBuilder(
      int index);
}
