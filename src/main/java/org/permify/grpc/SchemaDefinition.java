// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

/**
 * <pre>
 * The SchemaDefinition message provides definitions for entities and rules,
 * and includes references to clarify whether a name refers to an entity or a rule.
 * </pre>
 *
 * Protobuf type {@code base.v1.SchemaDefinition}
 */
public final class SchemaDefinition extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:base.v1.SchemaDefinition)
    SchemaDefinitionOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 2,
      /* suffix= */ "",
      SchemaDefinition.class.getName());
  }
  // Use SchemaDefinition.newBuilder() to construct.
  private SchemaDefinition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private SchemaDefinition() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 1:
        return internalGetEntityDefinitions();
      case 2:
        return internalGetRuleDefinitions();
      case 3:
        return internalGetReferences();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.permify.grpc.SchemaDefinition.class, org.permify.grpc.SchemaDefinition.Builder.class);
  }

  /**
   * <pre>
   * The Reference enum helps distinguish whether a name corresponds to an entity or a rule.
   * </pre>
   *
   * Protobuf enum {@code base.v1.SchemaDefinition.Reference}
   */
  public enum Reference
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default, unspecified reference.
     * </pre>
     *
     * <code>REFERENCE_UNSPECIFIED = 0;</code>
     */
    REFERENCE_UNSPECIFIED(0),
    /**
     * <pre>
     * Indicates that the name refers to an entity.
     * </pre>
     *
     * <code>REFERENCE_ENTITY = 1;</code>
     */
    REFERENCE_ENTITY(1),
    /**
     * <pre>
     * Indicates that the name refers to a rule.
     * </pre>
     *
     * <code>REFERENCE_RULE = 2;</code>
     */
    REFERENCE_RULE(2),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 2,
        /* suffix= */ "",
        Reference.class.getName());
    }
    /**
     * <pre>
     * Default, unspecified reference.
     * </pre>
     *
     * <code>REFERENCE_UNSPECIFIED = 0;</code>
     */
    public static final int REFERENCE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Indicates that the name refers to an entity.
     * </pre>
     *
     * <code>REFERENCE_ENTITY = 1;</code>
     */
    public static final int REFERENCE_ENTITY_VALUE = 1;
    /**
     * <pre>
     * Indicates that the name refers to a rule.
     * </pre>
     *
     * <code>REFERENCE_RULE = 2;</code>
     */
    public static final int REFERENCE_RULE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Reference valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Reference forNumber(int value) {
      switch (value) {
        case 0: return REFERENCE_UNSPECIFIED;
        case 1: return REFERENCE_ENTITY;
        case 2: return REFERENCE_RULE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Reference>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Reference> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Reference>() {
            public Reference findValueByNumber(int number) {
              return Reference.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.permify.grpc.SchemaDefinition.getDescriptor().getEnumTypes().get(0);
    }

    private static final Reference[] VALUES = values();

    public static Reference valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Reference(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:base.v1.SchemaDefinition.Reference)
  }

  public static final int ENTITY_DEFINITIONS_FIELD_NUMBER = 1;
  private static final class EntityDefinitionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, org.permify.grpc.EntityDefinition> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, org.permify.grpc.EntityDefinition>newDefaultInstance(
                org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_EntityDefinitionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                org.permify.grpc.EntityDefinition.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, org.permify.grpc.EntityDefinition> entityDefinitions_;
  private com.google.protobuf.MapField<java.lang.String, org.permify.grpc.EntityDefinition>
  internalGetEntityDefinitions() {
    if (entityDefinitions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          EntityDefinitionsDefaultEntryHolder.defaultEntry);
    }
    return entityDefinitions_;
  }
  public int getEntityDefinitionsCount() {
    return internalGetEntityDefinitions().getMap().size();
  }
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  @java.lang.Override
  public boolean containsEntityDefinitions(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetEntityDefinitions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getEntityDefinitionsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> getEntityDefinitions() {
    return getEntityDefinitionsMap();
  }
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> getEntityDefinitionsMap() {
    return internalGetEntityDefinitions().getMap();
  }
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  @java.lang.Override
  public /* nullable */
org.permify.grpc.EntityDefinition getEntityDefinitionsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.EntityDefinition defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> map =
        internalGetEntityDefinitions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.EntityDefinition getEntityDefinitionsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> map =
        internalGetEntityDefinitions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RULE_DEFINITIONS_FIELD_NUMBER = 2;
  private static final class RuleDefinitionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, org.permify.grpc.RuleDefinition> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, org.permify.grpc.RuleDefinition>newDefaultInstance(
                org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_RuleDefinitionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                org.permify.grpc.RuleDefinition.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, org.permify.grpc.RuleDefinition> ruleDefinitions_;
  private com.google.protobuf.MapField<java.lang.String, org.permify.grpc.RuleDefinition>
  internalGetRuleDefinitions() {
    if (ruleDefinitions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          RuleDefinitionsDefaultEntryHolder.defaultEntry);
    }
    return ruleDefinitions_;
  }
  public int getRuleDefinitionsCount() {
    return internalGetRuleDefinitions().getMap().size();
  }
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  @java.lang.Override
  public boolean containsRuleDefinitions(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetRuleDefinitions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getRuleDefinitionsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> getRuleDefinitions() {
    return getRuleDefinitionsMap();
  }
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> getRuleDefinitionsMap() {
    return internalGetRuleDefinitions().getMap();
  }
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  @java.lang.Override
  public /* nullable */
org.permify.grpc.RuleDefinition getRuleDefinitionsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.RuleDefinition defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> map =
        internalGetRuleDefinitions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.RuleDefinition getRuleDefinitionsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> map =
        internalGetRuleDefinitions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int REFERENCES_FIELD_NUMBER = 3;
  private static final class ReferencesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_ReferencesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.ENUM,
                org.permify.grpc.SchemaDefinition.Reference.REFERENCE_UNSPECIFIED.getNumber());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> references_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetReferences() {
    if (references_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ReferencesDefaultEntryHolder.defaultEntry);
    }
    return references_;
  }
  private static final
  com.google.protobuf.Internal.MapAdapter.Converter<
      java.lang.Integer, org.permify.grpc.SchemaDefinition.Reference> referencesValueConverter =
          com.google.protobuf.Internal.MapAdapter.newEnumConverter(
              org.permify.grpc.SchemaDefinition.Reference.internalGetValueMap(),
              org.permify.grpc.SchemaDefinition.Reference.UNRECOGNIZED);
  private static final java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
  internalGetAdaptedReferencesMap(
      java.util.Map<java.lang.String, java.lang.Integer> map) {
    return new com.google.protobuf.Internal.MapAdapter<
        java.lang.String, org.permify.grpc.SchemaDefinition.Reference, java.lang.Integer>(
            map, referencesValueConverter);
  }
  public int getReferencesCount() {
    return internalGetReferences().getMap().size();
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public boolean containsReferences(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetReferences().getMap().containsKey(key);
  }
  /**
   * Use {@link #getReferencesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
  getReferences() {
    return getReferencesMap();
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
  getReferencesMap() {
    return internalGetAdaptedReferencesMap(
        internalGetReferences().getMap());}
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public /* nullable */
org.permify.grpc.SchemaDefinition.Reference getReferencesOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.SchemaDefinition.Reference defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetReferences().getMap();
    return map.containsKey(key)
           ? referencesValueConverter.doForward(map.get(key))
           : defaultValue;
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.SchemaDefinition.Reference getReferencesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetReferences().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return referencesValueConverter.doForward(map.get(key));
  }
  /**
   * Use {@link #getReferencesValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer>
  getReferencesValue() {
    return getReferencesValueMap();
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.Integer>
  getReferencesValueMap() {
    return internalGetReferences().getMap();
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public int getReferencesValueOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetReferences().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  @java.lang.Override
  public int getReferencesValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetReferences().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessage
      .serializeStringMapTo(
        output,
        internalGetEntityDefinitions(),
        EntityDefinitionsDefaultEntryHolder.defaultEntry,
        1);
    com.google.protobuf.GeneratedMessage
      .serializeStringMapTo(
        output,
        internalGetRuleDefinitions(),
        RuleDefinitionsDefaultEntryHolder.defaultEntry,
        2);
    com.google.protobuf.GeneratedMessage
      .serializeStringMapTo(
        output,
        internalGetReferences(),
        ReferencesDefaultEntryHolder.defaultEntry,
        3);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, org.permify.grpc.EntityDefinition> entry
         : internalGetEntityDefinitions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.EntityDefinition>
      entityDefinitions__ = EntityDefinitionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, entityDefinitions__);
    }
    for (java.util.Map.Entry<java.lang.String, org.permify.grpc.RuleDefinition> entry
         : internalGetRuleDefinitions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.RuleDefinition>
      ruleDefinitions__ = RuleDefinitionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, ruleDefinitions__);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetReferences().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      references__ = ReferencesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, references__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.permify.grpc.SchemaDefinition)) {
      return super.equals(obj);
    }
    org.permify.grpc.SchemaDefinition other = (org.permify.grpc.SchemaDefinition) obj;

    if (!internalGetEntityDefinitions().equals(
        other.internalGetEntityDefinitions())) return false;
    if (!internalGetRuleDefinitions().equals(
        other.internalGetRuleDefinitions())) return false;
    if (!internalGetReferences().equals(
        other.internalGetReferences())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetEntityDefinitions().getMap().isEmpty()) {
      hash = (37 * hash) + ENTITY_DEFINITIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetEntityDefinitions().hashCode();
    }
    if (!internalGetRuleDefinitions().getMap().isEmpty()) {
      hash = (37 * hash) + RULE_DEFINITIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetRuleDefinitions().hashCode();
    }
    if (!internalGetReferences().getMap().isEmpty()) {
      hash = (37 * hash) + REFERENCES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetReferences().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.permify.grpc.SchemaDefinition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.permify.grpc.SchemaDefinition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.permify.grpc.SchemaDefinition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.SchemaDefinition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.permify.grpc.SchemaDefinition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The SchemaDefinition message provides definitions for entities and rules,
   * and includes references to clarify whether a name refers to an entity or a rule.
   * </pre>
   *
   * Protobuf type {@code base.v1.SchemaDefinition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:base.v1.SchemaDefinition)
      org.permify.grpc.SchemaDefinitionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetEntityDefinitions();
        case 2:
          return internalGetRuleDefinitions();
        case 3:
          return internalGetReferences();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableEntityDefinitions();
        case 2:
          return internalGetMutableRuleDefinitions();
        case 3:
          return internalGetMutableReferences();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.permify.grpc.SchemaDefinition.class, org.permify.grpc.SchemaDefinition.Builder.class);
    }

    // Construct using org.permify.grpc.SchemaDefinition.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableEntityDefinitions().clear();
      internalGetMutableRuleDefinitions().clear();
      internalGetMutableReferences().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.permify.grpc.BaseProto.internal_static_base_v1_SchemaDefinition_descriptor;
    }

    @java.lang.Override
    public org.permify.grpc.SchemaDefinition getDefaultInstanceForType() {
      return org.permify.grpc.SchemaDefinition.getDefaultInstance();
    }

    @java.lang.Override
    public org.permify.grpc.SchemaDefinition build() {
      org.permify.grpc.SchemaDefinition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.permify.grpc.SchemaDefinition buildPartial() {
      org.permify.grpc.SchemaDefinition result = new org.permify.grpc.SchemaDefinition(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.permify.grpc.SchemaDefinition result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.entityDefinitions_ = internalGetEntityDefinitions().build(EntityDefinitionsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.ruleDefinitions_ = internalGetRuleDefinitions().build(RuleDefinitionsDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.references_ = internalGetReferences();
        result.references_.makeImmutable();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.permify.grpc.SchemaDefinition) {
        return mergeFrom((org.permify.grpc.SchemaDefinition)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.permify.grpc.SchemaDefinition other) {
      if (other == org.permify.grpc.SchemaDefinition.getDefaultInstance()) return this;
      internalGetMutableEntityDefinitions().mergeFrom(
          other.internalGetEntityDefinitions());
      bitField0_ |= 0x00000001;
      internalGetMutableRuleDefinitions().mergeFrom(
          other.internalGetRuleDefinitions());
      bitField0_ |= 0x00000002;
      internalGetMutableReferences().mergeFrom(
          other.internalGetReferences());
      bitField0_ |= 0x00000004;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.EntityDefinition>
              entityDefinitions__ = input.readMessage(
                  EntityDefinitionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableEntityDefinitions().ensureBuilderMap().put(
                  entityDefinitions__.getKey(), entityDefinitions__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.RuleDefinition>
              ruleDefinitions__ = input.readMessage(
                  RuleDefinitionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableRuleDefinitions().ensureBuilderMap().put(
                  ruleDefinitions__.getKey(), ruleDefinitions__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              references__ = input.readMessage(
                  ReferencesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableReferences().getMutableMap().put(
                  references__.getKey(), references__.getValue());
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private static final class EntityDefinitionsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder, org.permify.grpc.EntityDefinition> {
      @java.lang.Override
      public org.permify.grpc.EntityDefinition build(org.permify.grpc.EntityDefinitionOrBuilder val) {
        if (val instanceof org.permify.grpc.EntityDefinition) { return (org.permify.grpc.EntityDefinition) val; }
        return ((org.permify.grpc.EntityDefinition.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.EntityDefinition> defaultEntry() {
        return EntityDefinitionsDefaultEntryHolder.defaultEntry;
      }
    };
    private static final EntityDefinitionsConverter entityDefinitionsConverter = new EntityDefinitionsConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder, org.permify.grpc.EntityDefinition, org.permify.grpc.EntityDefinition.Builder> entityDefinitions_;
    private com.google.protobuf.MapFieldBuilder<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder, org.permify.grpc.EntityDefinition, org.permify.grpc.EntityDefinition.Builder>
        internalGetEntityDefinitions() {
      if (entityDefinitions_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(entityDefinitionsConverter);
      }
      return entityDefinitions_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder, org.permify.grpc.EntityDefinition, org.permify.grpc.EntityDefinition.Builder>
        internalGetMutableEntityDefinitions() {
      if (entityDefinitions_ == null) {
        entityDefinitions_ = new com.google.protobuf.MapFieldBuilder<>(entityDefinitionsConverter);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return entityDefinitions_;
    }
    public int getEntityDefinitionsCount() {
      return internalGetEntityDefinitions().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    @java.lang.Override
    public boolean containsEntityDefinitions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetEntityDefinitions().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getEntityDefinitionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> getEntityDefinitions() {
      return getEntityDefinitionsMap();
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> getEntityDefinitionsMap() {
      return internalGetEntityDefinitions().getImmutableMap();
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    @java.lang.Override
    public /* nullable */
org.permify.grpc.EntityDefinition getEntityDefinitionsOrDefault(
        java.lang.String key,
        /* nullable */
org.permify.grpc.EntityDefinition defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder> map = internalGetMutableEntityDefinitions().ensureBuilderMap();
      return map.containsKey(key) ? entityDefinitionsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.EntityDefinition getEntityDefinitionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder> map = internalGetMutableEntityDefinitions().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return entityDefinitionsConverter.build(map.get(key));
    }
    public Builder clearEntityDefinitions() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableEntityDefinitions().clear();
      return this;
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    public Builder removeEntityDefinitions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableEntityDefinitions().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition>
        getMutableEntityDefinitions() {
      bitField0_ |= 0x00000001;
      return internalGetMutableEntityDefinitions().ensureMessageMap();
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    public Builder putEntityDefinitions(
        java.lang.String key,
        org.permify.grpc.EntityDefinition value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableEntityDefinitions().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    public Builder putAllEntityDefinitions(
        java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition> values) {
      for (java.util.Map.Entry<java.lang.String, org.permify.grpc.EntityDefinition> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableEntityDefinitions().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
     */
    public org.permify.grpc.EntityDefinition.Builder putEntityDefinitionsBuilderIfAbsent(
        java.lang.String key) {
      java.util.Map<java.lang.String, org.permify.grpc.EntityDefinitionOrBuilder> builderMap = internalGetMutableEntityDefinitions().ensureBuilderMap();
      org.permify.grpc.EntityDefinitionOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = org.permify.grpc.EntityDefinition.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof org.permify.grpc.EntityDefinition) {
        entry = ((org.permify.grpc.EntityDefinition) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (org.permify.grpc.EntityDefinition.Builder) entry;
    }

    private static final class RuleDefinitionsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder, org.permify.grpc.RuleDefinition> {
      @java.lang.Override
      public org.permify.grpc.RuleDefinition build(org.permify.grpc.RuleDefinitionOrBuilder val) {
        if (val instanceof org.permify.grpc.RuleDefinition) { return (org.permify.grpc.RuleDefinition) val; }
        return ((org.permify.grpc.RuleDefinition.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.String, org.permify.grpc.RuleDefinition> defaultEntry() {
        return RuleDefinitionsDefaultEntryHolder.defaultEntry;
      }
    };
    private static final RuleDefinitionsConverter ruleDefinitionsConverter = new RuleDefinitionsConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder, org.permify.grpc.RuleDefinition, org.permify.grpc.RuleDefinition.Builder> ruleDefinitions_;
    private com.google.protobuf.MapFieldBuilder<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder, org.permify.grpc.RuleDefinition, org.permify.grpc.RuleDefinition.Builder>
        internalGetRuleDefinitions() {
      if (ruleDefinitions_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(ruleDefinitionsConverter);
      }
      return ruleDefinitions_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder, org.permify.grpc.RuleDefinition, org.permify.grpc.RuleDefinition.Builder>
        internalGetMutableRuleDefinitions() {
      if (ruleDefinitions_ == null) {
        ruleDefinitions_ = new com.google.protobuf.MapFieldBuilder<>(ruleDefinitionsConverter);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return ruleDefinitions_;
    }
    public int getRuleDefinitionsCount() {
      return internalGetRuleDefinitions().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    @java.lang.Override
    public boolean containsRuleDefinitions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetRuleDefinitions().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getRuleDefinitionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> getRuleDefinitions() {
      return getRuleDefinitionsMap();
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> getRuleDefinitionsMap() {
      return internalGetRuleDefinitions().getImmutableMap();
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    @java.lang.Override
    public /* nullable */
org.permify.grpc.RuleDefinition getRuleDefinitionsOrDefault(
        java.lang.String key,
        /* nullable */
org.permify.grpc.RuleDefinition defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder> map = internalGetMutableRuleDefinitions().ensureBuilderMap();
      return map.containsKey(key) ? ruleDefinitionsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.RuleDefinition getRuleDefinitionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder> map = internalGetMutableRuleDefinitions().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return ruleDefinitionsConverter.build(map.get(key));
    }
    public Builder clearRuleDefinitions() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableRuleDefinitions().clear();
      return this;
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    public Builder removeRuleDefinitions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableRuleDefinitions().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition>
        getMutableRuleDefinitions() {
      bitField0_ |= 0x00000002;
      return internalGetMutableRuleDefinitions().ensureMessageMap();
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    public Builder putRuleDefinitions(
        java.lang.String key,
        org.permify.grpc.RuleDefinition value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableRuleDefinitions().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    public Builder putAllRuleDefinitions(
        java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition> values) {
      for (java.util.Map.Entry<java.lang.String, org.permify.grpc.RuleDefinition> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableRuleDefinitions().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
     */
    public org.permify.grpc.RuleDefinition.Builder putRuleDefinitionsBuilderIfAbsent(
        java.lang.String key) {
      java.util.Map<java.lang.String, org.permify.grpc.RuleDefinitionOrBuilder> builderMap = internalGetMutableRuleDefinitions().ensureBuilderMap();
      org.permify.grpc.RuleDefinitionOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = org.permify.grpc.RuleDefinition.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof org.permify.grpc.RuleDefinition) {
        entry = ((org.permify.grpc.RuleDefinition) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (org.permify.grpc.RuleDefinition.Builder) entry;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> references_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetReferences() {
      if (references_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ReferencesDefaultEntryHolder.defaultEntry);
      }
      return references_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetMutableReferences() {
      if (references_ == null) {
        references_ = com.google.protobuf.MapField.newMapField(
            ReferencesDefaultEntryHolder.defaultEntry);
      }
      if (!references_.isMutable()) {
        references_ = references_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return references_;
    }
    public int getReferencesCount() {
      return internalGetReferences().getMap().size();
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public boolean containsReferences(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetReferences().getMap().containsKey(key);
    }
    /**
     * Use {@link #getReferencesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
    getReferences() {
      return getReferencesMap();
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
    getReferencesMap() {
      return internalGetAdaptedReferencesMap(
          internalGetReferences().getMap());}
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public /* nullable */
org.permify.grpc.SchemaDefinition.Reference getReferencesOrDefault(
        java.lang.String key,
        /* nullable */
org.permify.grpc.SchemaDefinition.Reference defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetReferences().getMap();
      return map.containsKey(key)
             ? referencesValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.SchemaDefinition.Reference getReferencesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetReferences().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return referencesValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getReferencesValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getReferencesValue() {
      return getReferencesValueMap();
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Integer>
    getReferencesValueMap() {
      return internalGetReferences().getMap();
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public int getReferencesValueOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetReferences().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    @java.lang.Override
    public int getReferencesValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetReferences().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearReferences() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableReferences().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    public Builder removeReferences(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableReferences().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
        getMutableReferences() {
      bitField0_ |= 0x00000004;
      return internalGetAdaptedReferencesMap(
           internalGetMutableReferences().getMutableMap());
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    public Builder putReferences(
        java.lang.String key,
        org.permify.grpc.SchemaDefinition.Reference value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableReferences().getMutableMap()
          .put(key, referencesValueConverter.doBackward(value));
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    public Builder putAllReferences(
        java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference> values) {
      internalGetAdaptedReferencesMap(
          internalGetMutableReferences().getMutableMap())
              .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableReferencesValue() {
      bitField0_ |= 0x00000004;
      return internalGetMutableReferences().getMutableMap();
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    public Builder putReferencesValue(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableReferences().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <pre>
     * Map of references to signify whether a string refers to an entity or a rule.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
     */
    public Builder putAllReferencesValue(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableReferences().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }

    // @@protoc_insertion_point(builder_scope:base.v1.SchemaDefinition)
  }

  // @@protoc_insertion_point(class_scope:base.v1.SchemaDefinition)
  private static final org.permify.grpc.SchemaDefinition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.permify.grpc.SchemaDefinition();
  }

  public static org.permify.grpc.SchemaDefinition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SchemaDefinition>
      PARSER = new com.google.protobuf.AbstractParser<SchemaDefinition>() {
    @java.lang.Override
    public SchemaDefinition parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SchemaDefinition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SchemaDefinition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.permify.grpc.SchemaDefinition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

