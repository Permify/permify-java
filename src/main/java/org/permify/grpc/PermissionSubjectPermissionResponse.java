// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/service.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

/**
 * <pre>
 * PermissionSubjectPermissionResponse is the response message for the SubjectPermission method in the Permission service.
 * </pre>
 *
 * Protobuf type {@code base.v1.PermissionSubjectPermissionResponse}
 */
public final class PermissionSubjectPermissionResponse extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:base.v1.PermissionSubjectPermissionResponse)
    PermissionSubjectPermissionResponseOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 2,
      /* suffix= */ "",
      PermissionSubjectPermissionResponse.class.getName());
  }
  // Use PermissionSubjectPermissionResponse.newBuilder() to construct.
  private PermissionSubjectPermissionResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private PermissionSubjectPermissionResponse() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 1:
        return internalGetResults();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.permify.grpc.PermissionSubjectPermissionResponse.class, org.permify.grpc.PermissionSubjectPermissionResponse.Builder.class);
  }

  public static final int RESULTS_FIELD_NUMBER = 1;
  private static final class ResultsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_ResultsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.ENUM,
                org.permify.grpc.CheckResult.CHECK_RESULT_UNSPECIFIED.getNumber());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> results_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetResults() {
    if (results_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ResultsDefaultEntryHolder.defaultEntry);
    }
    return results_;
  }
  private static final
  com.google.protobuf.Internal.MapAdapter.Converter<
      java.lang.Integer, org.permify.grpc.CheckResult> resultsValueConverter =
          com.google.protobuf.Internal.MapAdapter.newEnumConverter(
              org.permify.grpc.CheckResult.internalGetValueMap(),
              org.permify.grpc.CheckResult.UNRECOGNIZED);
  private static final java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
  internalGetAdaptedResultsMap(
      java.util.Map<java.lang.String, java.lang.Integer> map) {
    return new com.google.protobuf.Internal.MapAdapter<
        java.lang.String, org.permify.grpc.CheckResult, java.lang.Integer>(
            map, resultsValueConverter);
  }
  public int getResultsCount() {
    return internalGetResults().getMap().size();
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public boolean containsResults(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetResults().getMap().containsKey(key);
  }
  /**
   * Use {@link #getResultsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
  getResults() {
    return getResultsMap();
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
  getResultsMap() {
    return internalGetAdaptedResultsMap(
        internalGetResults().getMap());}
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public /* nullable */
org.permify.grpc.CheckResult getResultsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.CheckResult defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetResults().getMap();
    return map.containsKey(key)
           ? resultsValueConverter.doForward(map.get(key))
           : defaultValue;
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public org.permify.grpc.CheckResult getResultsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetResults().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return resultsValueConverter.doForward(map.get(key));
  }
  /**
   * Use {@link #getResultsValueMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer>
  getResultsValue() {
    return getResultsValueMap();
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.Integer>
  getResultsValueMap() {
    return internalGetResults().getMap();
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public int getResultsValueOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetResults().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Map of results for each permission check.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
   */
  @java.lang.Override
  public int getResultsValueOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetResults().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessage
      .serializeStringMapTo(
        output,
        internalGetResults(),
        ResultsDefaultEntryHolder.defaultEntry,
        1);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetResults().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      results__ = ResultsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, results__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.permify.grpc.PermissionSubjectPermissionResponse)) {
      return super.equals(obj);
    }
    org.permify.grpc.PermissionSubjectPermissionResponse other = (org.permify.grpc.PermissionSubjectPermissionResponse) obj;

    if (!internalGetResults().equals(
        other.internalGetResults())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetResults().getMap().isEmpty()) {
      hash = (37 * hash) + RESULTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetResults().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.permify.grpc.PermissionSubjectPermissionResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.permify.grpc.PermissionSubjectPermissionResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.permify.grpc.PermissionSubjectPermissionResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.permify.grpc.PermissionSubjectPermissionResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * PermissionSubjectPermissionResponse is the response message for the SubjectPermission method in the Permission service.
   * </pre>
   *
   * Protobuf type {@code base.v1.PermissionSubjectPermissionResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:base.v1.PermissionSubjectPermissionResponse)
      org.permify.grpc.PermissionSubjectPermissionResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetResults();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableResults();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.permify.grpc.PermissionSubjectPermissionResponse.class, org.permify.grpc.PermissionSubjectPermissionResponse.Builder.class);
    }

    // Construct using org.permify.grpc.PermissionSubjectPermissionResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableResults().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.permify.grpc.ServiceProto.internal_static_base_v1_PermissionSubjectPermissionResponse_descriptor;
    }

    @java.lang.Override
    public org.permify.grpc.PermissionSubjectPermissionResponse getDefaultInstanceForType() {
      return org.permify.grpc.PermissionSubjectPermissionResponse.getDefaultInstance();
    }

    @java.lang.Override
    public org.permify.grpc.PermissionSubjectPermissionResponse build() {
      org.permify.grpc.PermissionSubjectPermissionResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.permify.grpc.PermissionSubjectPermissionResponse buildPartial() {
      org.permify.grpc.PermissionSubjectPermissionResponse result = new org.permify.grpc.PermissionSubjectPermissionResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.permify.grpc.PermissionSubjectPermissionResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.results_ = internalGetResults();
        result.results_.makeImmutable();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.permify.grpc.PermissionSubjectPermissionResponse) {
        return mergeFrom((org.permify.grpc.PermissionSubjectPermissionResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.permify.grpc.PermissionSubjectPermissionResponse other) {
      if (other == org.permify.grpc.PermissionSubjectPermissionResponse.getDefaultInstance()) return this;
      internalGetMutableResults().mergeFrom(
          other.internalGetResults());
      bitField0_ |= 0x00000001;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              results__ = input.readMessage(
                  ResultsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableResults().getMutableMap().put(
                  results__.getKey(), results__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> results_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetResults() {
      if (results_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ResultsDefaultEntryHolder.defaultEntry);
      }
      return results_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
        internalGetMutableResults() {
      if (results_ == null) {
        results_ = com.google.protobuf.MapField.newMapField(
            ResultsDefaultEntryHolder.defaultEntry);
      }
      if (!results_.isMutable()) {
        results_ = results_.copy();
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return results_;
    }
    public int getResultsCount() {
      return internalGetResults().getMap().size();
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public boolean containsResults(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetResults().getMap().containsKey(key);
    }
    /**
     * Use {@link #getResultsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
    getResults() {
      return getResultsMap();
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
    getResultsMap() {
      return internalGetAdaptedResultsMap(
          internalGetResults().getMap());}
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public /* nullable */
org.permify.grpc.CheckResult getResultsOrDefault(
        java.lang.String key,
        /* nullable */
org.permify.grpc.CheckResult defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetResults().getMap();
      return map.containsKey(key)
             ? resultsValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public org.permify.grpc.CheckResult getResultsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetResults().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return resultsValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getResultsValueMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getResultsValue() {
      return getResultsValueMap();
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Integer>
    getResultsValueMap() {
      return internalGetResults().getMap();
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public int getResultsValueOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetResults().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    @java.lang.Override
    public int getResultsValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetResults().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearResults() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableResults().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    public Builder removeResults(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableResults().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.permify.grpc.CheckResult>
        getMutableResults() {
      bitField0_ |= 0x00000001;
      return internalGetAdaptedResultsMap(
           internalGetMutableResults().getMutableMap());
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    public Builder putResults(
        java.lang.String key,
        org.permify.grpc.CheckResult value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableResults().getMutableMap()
          .put(key, resultsValueConverter.doBackward(value));
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    public Builder putAllResults(
        java.util.Map<java.lang.String, org.permify.grpc.CheckResult> values) {
      internalGetAdaptedResultsMap(
          internalGetMutableResults().getMutableMap())
              .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableResultsValue() {
      bitField0_ |= 0x00000001;
      return internalGetMutableResults().getMutableMap();
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    public Builder putResultsValue(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }

      internalGetMutableResults().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Map of results for each permission check.
     * </pre>
     *
     * <code>map&lt;string, .base.v1.CheckResult&gt; results = 1 [json_name = "results"];</code>
     */
    public Builder putAllResultsValue(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableResults().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }

    // @@protoc_insertion_point(builder_scope:base.v1.PermissionSubjectPermissionResponse)
  }

  // @@protoc_insertion_point(class_scope:base.v1.PermissionSubjectPermissionResponse)
  private static final org.permify.grpc.PermissionSubjectPermissionResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.permify.grpc.PermissionSubjectPermissionResponse();
  }

  public static org.permify.grpc.PermissionSubjectPermissionResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PermissionSubjectPermissionResponse>
      PARSER = new com.google.protobuf.AbstractParser<PermissionSubjectPermissionResponse>() {
    @java.lang.Override
    public PermissionSubjectPermissionResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<PermissionSubjectPermissionResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PermissionSubjectPermissionResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.permify.grpc.PermissionSubjectPermissionResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

