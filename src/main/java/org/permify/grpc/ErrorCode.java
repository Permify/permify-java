// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/errors.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

/**
 * Protobuf enum {@code base.v1.ErrorCode}
 */
public enum ErrorCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  ERROR_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * authn
   * </pre>
   *
   * <code>ERROR_CODE_MISSING_BEARER_TOKEN = 1001;</code>
   */
  ERROR_CODE_MISSING_BEARER_TOKEN(1001),
  /**
   * <code>ERROR_CODE_UNAUTHENTICATED = 1002;</code>
   */
  ERROR_CODE_UNAUTHENTICATED(1002),
  /**
   * <code>ERROR_CODE_MISSING_TENANT_ID = 1003;</code>
   */
  ERROR_CODE_MISSING_TENANT_ID(1003),
  /**
   * <code>ERROR_CODE_INVALID_AUDIENCE = 1004;</code>
   */
  ERROR_CODE_INVALID_AUDIENCE(1004),
  /**
   * <code>ERROR_CODE_INVALID_CLAIMS = 1005;</code>
   */
  ERROR_CODE_INVALID_CLAIMS(1005),
  /**
   * <code>ERROR_CODE_INVALID_ISSUER = 1006;</code>
   */
  ERROR_CODE_INVALID_ISSUER(1006),
  /**
   * <code>ERROR_CODE_INVALID_BEARER_TOKEN = 1007;</code>
   */
  ERROR_CODE_INVALID_BEARER_TOKEN(1007),
  /**
   * <pre>
   * validation
   * </pre>
   *
   * <code>ERROR_CODE_VALIDATION = 2000;</code>
   */
  ERROR_CODE_VALIDATION(2000),
  /**
   * <code>ERROR_CODE_UNDEFINED_CHILD_TYPE = 2002;</code>
   */
  ERROR_CODE_UNDEFINED_CHILD_TYPE(2002),
  /**
   * <code>ERROR_CODE_UNDEFINED_CHILD_KIND = 2003;</code>
   */
  ERROR_CODE_UNDEFINED_CHILD_KIND(2003),
  /**
   * <code>ERROR_CODE_UNDEFINED_RELATION_REFERENCE = 2006;</code>
   */
  ERROR_CODE_UNDEFINED_RELATION_REFERENCE(2006),
  /**
   * <code>ERROR_CODE_NOT_SUPPORTED_RELATION_WALK = 2007;</code>
   */
  ERROR_CODE_NOT_SUPPORTED_RELATION_WALK(2007),
  /**
   * <code>ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL = 2008;</code>
   */
  ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL(2008),
  /**
   * <code>ERROR_CODE_DEPTH_NOT_ENOUGH = 2009;</code>
   */
  ERROR_CODE_DEPTH_NOT_ENOUGH(2009),
  /**
   * <code>ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES = 2010;</code>
   */
  ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES(2010),
  /**
   * <code>ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE = 2011;</code>
   */
  ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE(2011),
  /**
   * <code>ERROR_CODE_DUPLICATED_ENTITY_REFERENCE = 2012;</code>
   */
  ERROR_CODE_DUPLICATED_ENTITY_REFERENCE(2012),
  /**
   * <code>ERROR_CODE_DUPLICATED_RELATION_REFERENCE = 2013;</code>
   */
  ERROR_CODE_DUPLICATED_RELATION_REFERENCE(2013),
  /**
   * <code>ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE = 2014;</code>
   */
  ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE(2014),
  /**
   * <code>ERROR_CODE_SCHEMA_PARSE = 2015;</code>
   */
  ERROR_CODE_SCHEMA_PARSE(2015),
  /**
   * <code>ERROR_CODE_SCHEMA_COMPILE = 2016;</code>
   */
  ERROR_CODE_SCHEMA_COMPILE(2016),
  /**
   * <code>ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY = 2017;</code>
   */
  ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY(2017),
  /**
   * <code>ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY = 2018;</code>
   */
  ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY(2018),
  /**
   * <code>ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION = 2019;</code>
   */
  ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION(2019),
  /**
   * <code>ERROR_CODE_UNIQUE_CONSTRAINT = 2020;</code>
   */
  ERROR_CODE_UNIQUE_CONSTRAINT(2020),
  /**
   * <code>ERROR_CODE_INVALID_CONTINUOUS_TOKEN = 2021;</code>
   */
  ERROR_CODE_INVALID_CONTINUOUS_TOKEN(2021),
  /**
   * <code>ERROR_CODE_INVALID_KEY = 2022;</code>
   */
  ERROR_CODE_INVALID_KEY(2022),
  /**
   * <code>ERROR_CODE_ENTITY_TYPE_REQUIRED = 2023;</code>
   */
  ERROR_CODE_ENTITY_TYPE_REQUIRED(2023),
  /**
   * <code>ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA = 2024;</code>
   */
  ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA(2024),
  /**
   * <code>ERROR_CODE_INVALID_ARGUMENT = 2025;</code>
   */
  ERROR_CODE_INVALID_ARGUMENT(2025),
  /**
   * <code>ERROR_CODE_INVALID_RULE_REFERENCE = 2026;</code>
   */
  ERROR_CODE_INVALID_RULE_REFERENCE(2026),
  /**
   * <code>ERROR_CODE_NOT_SUPPORTED_WALK = 2027;</code>
   */
  ERROR_CODE_NOT_SUPPORTED_WALK(2027),
  /**
   * <code>ERROR_CODE_MISSING_ARGUMENT = 2028;</code>
   */
  ERROR_CODE_MISSING_ARGUMENT(2028),
  /**
   * <code>ERROR_CODE_ALREADY_EXIST = 2029;</code>
   */
  ERROR_CODE_ALREADY_EXIST(2029),
  /**
   * <code>ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED = 2030;</code>
   */
  ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED(2030),
  /**
   * <pre>
   * not found
   * </pre>
   *
   * <code>ERROR_CODE_NOT_FOUND = 4000;</code>
   */
  ERROR_CODE_NOT_FOUND(4000),
  /**
   * <code>ERROR_CODE_ENTITY_TYPE_NOT_FOUND = 4001;</code>
   */
  ERROR_CODE_ENTITY_TYPE_NOT_FOUND(4001),
  /**
   * <code>ERROR_CODE_PERMISSION_NOT_FOUND = 4002;</code>
   */
  ERROR_CODE_PERMISSION_NOT_FOUND(4002),
  /**
   * <code>ERROR_CODE_SCHEMA_NOT_FOUND = 4003;</code>
   */
  ERROR_CODE_SCHEMA_NOT_FOUND(4003),
  /**
   * <code>ERROR_CODE_SUBJECT_TYPE_NOT_FOUND = 4004;</code>
   */
  ERROR_CODE_SUBJECT_TYPE_NOT_FOUND(4004),
  /**
   * <code>ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND = 4005;</code>
   */
  ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND(4005),
  /**
   * <code>ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND = 4006;</code>
   */
  ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND(4006),
  /**
   * <code>ERROR_CODE_RELATION_DEFINITION_NOT_FOUND = 4007;</code>
   */
  ERROR_CODE_RELATION_DEFINITION_NOT_FOUND(4007),
  /**
   * <code>ERROR_CODE_RECORD_NOT_FOUND = 4008;</code>
   */
  ERROR_CODE_RECORD_NOT_FOUND(4008),
  /**
   * <code>ERROR_CODE_TENANT_NOT_FOUND = 4009;</code>
   */
  ERROR_CODE_TENANT_NOT_FOUND(4009),
  /**
   * <code>ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND = 4010;</code>
   */
  ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND(4010),
  /**
   * <code>ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH = 4011;</code>
   */
  ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH(4011),
  /**
   * <code>ERROR_CODE_BUNDLE_NOT_FOUND = 4012;</code>
   */
  ERROR_CODE_BUNDLE_NOT_FOUND(4012),
  /**
   * <code>ERROR_CODE_RULE_DEFINITION_NOT_FOUND = 4013;</code>
   */
  ERROR_CODE_RULE_DEFINITION_NOT_FOUND(4013),
  /**
   * <code>ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND = 4014;</code>
   */
  ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND(4014),
  /**
   * <code>ERROR_CODE_REFERENCE_NOT_FOUND = 4015;</code>
   */
  ERROR_CODE_REFERENCE_NOT_FOUND(4015),
  /**
   * <pre>
   * internal
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 5000;</code>
   */
  ERROR_CODE_INTERNAL(5000),
  /**
   * <code>ERROR_CODE_CANCELLED = 5001;</code>
   */
  ERROR_CODE_CANCELLED(5001),
  /**
   * <code>ERROR_CODE_SQL_BUILDER = 5002;</code>
   */
  ERROR_CODE_SQL_BUILDER(5002),
  /**
   * <code>ERROR_CODE_CIRCUIT_BREAKER = 5003;</code>
   */
  ERROR_CODE_CIRCUIT_BREAKER(5003),
  /**
   * <code>ERROR_CODE_EXECUTION = 5005;</code>
   */
  ERROR_CODE_EXECUTION(5005),
  /**
   * <code>ERROR_CODE_SCAN = 5006;</code>
   */
  ERROR_CODE_SCAN(5006),
  /**
   * <code>ERROR_CODE_MIGRATION = 5007;</code>
   */
  ERROR_CODE_MIGRATION(5007),
  /**
   * <code>ERROR_CODE_TYPE_CONVERSATION = 5008;</code>
   */
  ERROR_CODE_TYPE_CONVERSATION(5008),
  /**
   * <code>ERROR_CODE_ERROR_MAX_RETRIES = 5009;</code>
   */
  ERROR_CODE_ERROR_MAX_RETRIES(5009),
  /**
   * <code>ERROR_CODE_ROLLBACK = 5010;</code>
   */
  ERROR_CODE_ROLLBACK(5010),
  /**
   * <code>ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION = 5011;</code>
   */
  ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION(5011),
  /**
   * <code>ERROR_CODE_NOT_IMPLEMENTED = 5012;</code>
   */
  ERROR_CODE_NOT_IMPLEMENTED(5012),
  /**
   * <code>ERROR_CODE_DATASTORE = 5013;</code>
   */
  ERROR_CODE_DATASTORE(5013),
  /**
   * <code>ERROR_CODE_UNKNOWN_STATEMENT_TYPE = 5014;</code>
   */
  ERROR_CODE_UNKNOWN_STATEMENT_TYPE(5014),
  /**
   * <code>ERROR_CODE_UNKNOWN_REFERENCE_TYPE = 5015;</code>
   */
  ERROR_CODE_UNKNOWN_REFERENCE_TYPE(5015),
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT = 5016;</code>
   */
  ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT(5016),
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT = 5017;</code>
   */
  ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT(5017),
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT = 5018;</code>
   */
  ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT(5018),
  /**
   * <code>ERROR_CODE_SERIALIZATION = 5019;</code>
   */
  ERROR_CODE_SERIALIZATION(5019),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 2,
      /* suffix= */ "",
      ErrorCode.class.getName());
  }
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int ERROR_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * authn
   * </pre>
   *
   * <code>ERROR_CODE_MISSING_BEARER_TOKEN = 1001;</code>
   */
  public static final int ERROR_CODE_MISSING_BEARER_TOKEN_VALUE = 1001;
  /**
   * <code>ERROR_CODE_UNAUTHENTICATED = 1002;</code>
   */
  public static final int ERROR_CODE_UNAUTHENTICATED_VALUE = 1002;
  /**
   * <code>ERROR_CODE_MISSING_TENANT_ID = 1003;</code>
   */
  public static final int ERROR_CODE_MISSING_TENANT_ID_VALUE = 1003;
  /**
   * <code>ERROR_CODE_INVALID_AUDIENCE = 1004;</code>
   */
  public static final int ERROR_CODE_INVALID_AUDIENCE_VALUE = 1004;
  /**
   * <code>ERROR_CODE_INVALID_CLAIMS = 1005;</code>
   */
  public static final int ERROR_CODE_INVALID_CLAIMS_VALUE = 1005;
  /**
   * <code>ERROR_CODE_INVALID_ISSUER = 1006;</code>
   */
  public static final int ERROR_CODE_INVALID_ISSUER_VALUE = 1006;
  /**
   * <code>ERROR_CODE_INVALID_BEARER_TOKEN = 1007;</code>
   */
  public static final int ERROR_CODE_INVALID_BEARER_TOKEN_VALUE = 1007;
  /**
   * <pre>
   * validation
   * </pre>
   *
   * <code>ERROR_CODE_VALIDATION = 2000;</code>
   */
  public static final int ERROR_CODE_VALIDATION_VALUE = 2000;
  /**
   * <code>ERROR_CODE_UNDEFINED_CHILD_TYPE = 2002;</code>
   */
  public static final int ERROR_CODE_UNDEFINED_CHILD_TYPE_VALUE = 2002;
  /**
   * <code>ERROR_CODE_UNDEFINED_CHILD_KIND = 2003;</code>
   */
  public static final int ERROR_CODE_UNDEFINED_CHILD_KIND_VALUE = 2003;
  /**
   * <code>ERROR_CODE_UNDEFINED_RELATION_REFERENCE = 2006;</code>
   */
  public static final int ERROR_CODE_UNDEFINED_RELATION_REFERENCE_VALUE = 2006;
  /**
   * <code>ERROR_CODE_NOT_SUPPORTED_RELATION_WALK = 2007;</code>
   */
  public static final int ERROR_CODE_NOT_SUPPORTED_RELATION_WALK_VALUE = 2007;
  /**
   * <code>ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL = 2008;</code>
   */
  public static final int ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL_VALUE = 2008;
  /**
   * <code>ERROR_CODE_DEPTH_NOT_ENOUGH = 2009;</code>
   */
  public static final int ERROR_CODE_DEPTH_NOT_ENOUGH_VALUE = 2009;
  /**
   * <code>ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES = 2010;</code>
   */
  public static final int ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES_VALUE = 2010;
  /**
   * <code>ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE = 2011;</code>
   */
  public static final int ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE_VALUE = 2011;
  /**
   * <code>ERROR_CODE_DUPLICATED_ENTITY_REFERENCE = 2012;</code>
   */
  public static final int ERROR_CODE_DUPLICATED_ENTITY_REFERENCE_VALUE = 2012;
  /**
   * <code>ERROR_CODE_DUPLICATED_RELATION_REFERENCE = 2013;</code>
   */
  public static final int ERROR_CODE_DUPLICATED_RELATION_REFERENCE_VALUE = 2013;
  /**
   * <code>ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE = 2014;</code>
   */
  public static final int ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE_VALUE = 2014;
  /**
   * <code>ERROR_CODE_SCHEMA_PARSE = 2015;</code>
   */
  public static final int ERROR_CODE_SCHEMA_PARSE_VALUE = 2015;
  /**
   * <code>ERROR_CODE_SCHEMA_COMPILE = 2016;</code>
   */
  public static final int ERROR_CODE_SCHEMA_COMPILE_VALUE = 2016;
  /**
   * <code>ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY = 2017;</code>
   */
  public static final int ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY_VALUE = 2017;
  /**
   * <code>ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY = 2018;</code>
   */
  public static final int ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY_VALUE = 2018;
  /**
   * <code>ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION = 2019;</code>
   */
  public static final int ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION_VALUE = 2019;
  /**
   * <code>ERROR_CODE_UNIQUE_CONSTRAINT = 2020;</code>
   */
  public static final int ERROR_CODE_UNIQUE_CONSTRAINT_VALUE = 2020;
  /**
   * <code>ERROR_CODE_INVALID_CONTINUOUS_TOKEN = 2021;</code>
   */
  public static final int ERROR_CODE_INVALID_CONTINUOUS_TOKEN_VALUE = 2021;
  /**
   * <code>ERROR_CODE_INVALID_KEY = 2022;</code>
   */
  public static final int ERROR_CODE_INVALID_KEY_VALUE = 2022;
  /**
   * <code>ERROR_CODE_ENTITY_TYPE_REQUIRED = 2023;</code>
   */
  public static final int ERROR_CODE_ENTITY_TYPE_REQUIRED_VALUE = 2023;
  /**
   * <code>ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA = 2024;</code>
   */
  public static final int ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA_VALUE = 2024;
  /**
   * <code>ERROR_CODE_INVALID_ARGUMENT = 2025;</code>
   */
  public static final int ERROR_CODE_INVALID_ARGUMENT_VALUE = 2025;
  /**
   * <code>ERROR_CODE_INVALID_RULE_REFERENCE = 2026;</code>
   */
  public static final int ERROR_CODE_INVALID_RULE_REFERENCE_VALUE = 2026;
  /**
   * <code>ERROR_CODE_NOT_SUPPORTED_WALK = 2027;</code>
   */
  public static final int ERROR_CODE_NOT_SUPPORTED_WALK_VALUE = 2027;
  /**
   * <code>ERROR_CODE_MISSING_ARGUMENT = 2028;</code>
   */
  public static final int ERROR_CODE_MISSING_ARGUMENT_VALUE = 2028;
  /**
   * <code>ERROR_CODE_ALREADY_EXIST = 2029;</code>
   */
  public static final int ERROR_CODE_ALREADY_EXIST_VALUE = 2029;
  /**
   * <code>ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED = 2030;</code>
   */
  public static final int ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED_VALUE = 2030;
  /**
   * <pre>
   * not found
   * </pre>
   *
   * <code>ERROR_CODE_NOT_FOUND = 4000;</code>
   */
  public static final int ERROR_CODE_NOT_FOUND_VALUE = 4000;
  /**
   * <code>ERROR_CODE_ENTITY_TYPE_NOT_FOUND = 4001;</code>
   */
  public static final int ERROR_CODE_ENTITY_TYPE_NOT_FOUND_VALUE = 4001;
  /**
   * <code>ERROR_CODE_PERMISSION_NOT_FOUND = 4002;</code>
   */
  public static final int ERROR_CODE_PERMISSION_NOT_FOUND_VALUE = 4002;
  /**
   * <code>ERROR_CODE_SCHEMA_NOT_FOUND = 4003;</code>
   */
  public static final int ERROR_CODE_SCHEMA_NOT_FOUND_VALUE = 4003;
  /**
   * <code>ERROR_CODE_SUBJECT_TYPE_NOT_FOUND = 4004;</code>
   */
  public static final int ERROR_CODE_SUBJECT_TYPE_NOT_FOUND_VALUE = 4004;
  /**
   * <code>ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND = 4005;</code>
   */
  public static final int ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND_VALUE = 4005;
  /**
   * <code>ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND = 4006;</code>
   */
  public static final int ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND_VALUE = 4006;
  /**
   * <code>ERROR_CODE_RELATION_DEFINITION_NOT_FOUND = 4007;</code>
   */
  public static final int ERROR_CODE_RELATION_DEFINITION_NOT_FOUND_VALUE = 4007;
  /**
   * <code>ERROR_CODE_RECORD_NOT_FOUND = 4008;</code>
   */
  public static final int ERROR_CODE_RECORD_NOT_FOUND_VALUE = 4008;
  /**
   * <code>ERROR_CODE_TENANT_NOT_FOUND = 4009;</code>
   */
  public static final int ERROR_CODE_TENANT_NOT_FOUND_VALUE = 4009;
  /**
   * <code>ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND = 4010;</code>
   */
  public static final int ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND_VALUE = 4010;
  /**
   * <code>ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH = 4011;</code>
   */
  public static final int ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH_VALUE = 4011;
  /**
   * <code>ERROR_CODE_BUNDLE_NOT_FOUND = 4012;</code>
   */
  public static final int ERROR_CODE_BUNDLE_NOT_FOUND_VALUE = 4012;
  /**
   * <code>ERROR_CODE_RULE_DEFINITION_NOT_FOUND = 4013;</code>
   */
  public static final int ERROR_CODE_RULE_DEFINITION_NOT_FOUND_VALUE = 4013;
  /**
   * <code>ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND = 4014;</code>
   */
  public static final int ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND_VALUE = 4014;
  /**
   * <code>ERROR_CODE_REFERENCE_NOT_FOUND = 4015;</code>
   */
  public static final int ERROR_CODE_REFERENCE_NOT_FOUND_VALUE = 4015;
  /**
   * <pre>
   * internal
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 5000;</code>
   */
  public static final int ERROR_CODE_INTERNAL_VALUE = 5000;
  /**
   * <code>ERROR_CODE_CANCELLED = 5001;</code>
   */
  public static final int ERROR_CODE_CANCELLED_VALUE = 5001;
  /**
   * <code>ERROR_CODE_SQL_BUILDER = 5002;</code>
   */
  public static final int ERROR_CODE_SQL_BUILDER_VALUE = 5002;
  /**
   * <code>ERROR_CODE_CIRCUIT_BREAKER = 5003;</code>
   */
  public static final int ERROR_CODE_CIRCUIT_BREAKER_VALUE = 5003;
  /**
   * <code>ERROR_CODE_EXECUTION = 5005;</code>
   */
  public static final int ERROR_CODE_EXECUTION_VALUE = 5005;
  /**
   * <code>ERROR_CODE_SCAN = 5006;</code>
   */
  public static final int ERROR_CODE_SCAN_VALUE = 5006;
  /**
   * <code>ERROR_CODE_MIGRATION = 5007;</code>
   */
  public static final int ERROR_CODE_MIGRATION_VALUE = 5007;
  /**
   * <code>ERROR_CODE_TYPE_CONVERSATION = 5008;</code>
   */
  public static final int ERROR_CODE_TYPE_CONVERSATION_VALUE = 5008;
  /**
   * <code>ERROR_CODE_ERROR_MAX_RETRIES = 5009;</code>
   */
  public static final int ERROR_CODE_ERROR_MAX_RETRIES_VALUE = 5009;
  /**
   * <code>ERROR_CODE_ROLLBACK = 5010;</code>
   */
  public static final int ERROR_CODE_ROLLBACK_VALUE = 5010;
  /**
   * <code>ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION = 5011;</code>
   */
  public static final int ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION_VALUE = 5011;
  /**
   * <code>ERROR_CODE_NOT_IMPLEMENTED = 5012;</code>
   */
  public static final int ERROR_CODE_NOT_IMPLEMENTED_VALUE = 5012;
  /**
   * <code>ERROR_CODE_DATASTORE = 5013;</code>
   */
  public static final int ERROR_CODE_DATASTORE_VALUE = 5013;
  /**
   * <code>ERROR_CODE_UNKNOWN_STATEMENT_TYPE = 5014;</code>
   */
  public static final int ERROR_CODE_UNKNOWN_STATEMENT_TYPE_VALUE = 5014;
  /**
   * <code>ERROR_CODE_UNKNOWN_REFERENCE_TYPE = 5015;</code>
   */
  public static final int ERROR_CODE_UNKNOWN_REFERENCE_TYPE_VALUE = 5015;
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT = 5016;</code>
   */
  public static final int ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT_VALUE = 5016;
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT = 5017;</code>
   */
  public static final int ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT_VALUE = 5017;
  /**
   * <code>ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT = 5018;</code>
   */
  public static final int ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT_VALUE = 5018;
  /**
   * <code>ERROR_CODE_SERIALIZATION = 5019;</code>
   */
  public static final int ERROR_CODE_SERIALIZATION_VALUE = 5019;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorCode forNumber(int value) {
    switch (value) {
      case 0: return ERROR_CODE_UNSPECIFIED;
      case 1001: return ERROR_CODE_MISSING_BEARER_TOKEN;
      case 1002: return ERROR_CODE_UNAUTHENTICATED;
      case 1003: return ERROR_CODE_MISSING_TENANT_ID;
      case 1004: return ERROR_CODE_INVALID_AUDIENCE;
      case 1005: return ERROR_CODE_INVALID_CLAIMS;
      case 1006: return ERROR_CODE_INVALID_ISSUER;
      case 1007: return ERROR_CODE_INVALID_BEARER_TOKEN;
      case 2000: return ERROR_CODE_VALIDATION;
      case 2002: return ERROR_CODE_UNDEFINED_CHILD_TYPE;
      case 2003: return ERROR_CODE_UNDEFINED_CHILD_KIND;
      case 2006: return ERROR_CODE_UNDEFINED_RELATION_REFERENCE;
      case 2007: return ERROR_CODE_NOT_SUPPORTED_RELATION_WALK;
      case 2008: return ERROR_CODE_ENTITY_AND_SUBJECT_CANNOT_BE_EQUAL;
      case 2009: return ERROR_CODE_DEPTH_NOT_ENOUGH;
      case 2010: return ERROR_CODE_RELATION_REFERENCE_NOT_FOUND_IN_ENTITY_REFERENCES;
      case 2011: return ERROR_CODE_RELATION_REFERENCE_MUST_HAVE_ONE_ENTITY_REFERENCE;
      case 2012: return ERROR_CODE_DUPLICATED_ENTITY_REFERENCE;
      case 2013: return ERROR_CODE_DUPLICATED_RELATION_REFERENCE;
      case 2014: return ERROR_CODE_DUPLICATED_PERMISSION_REFERENCE;
      case 2015: return ERROR_CODE_SCHEMA_PARSE;
      case 2016: return ERROR_CODE_SCHEMA_COMPILE;
      case 2017: return ERROR_CODE_SUBJECT_RELATION_MUST_BE_EMPTY;
      case 2018: return ERROR_CODE_SUBJECT_RELATION_CANNOT_BE_EMPTY;
      case 2019: return ERROR_CODE_SCHEMA_MUST_HAVE_USER_ENTITY_DEFINITION;
      case 2020: return ERROR_CODE_UNIQUE_CONSTRAINT;
      case 2021: return ERROR_CODE_INVALID_CONTINUOUS_TOKEN;
      case 2022: return ERROR_CODE_INVALID_KEY;
      case 2023: return ERROR_CODE_ENTITY_TYPE_REQUIRED;
      case 2024: return ERROR_CODE_NO_ENTITY_REFERENCES_FOUND_IN_SCHEMA;
      case 2025: return ERROR_CODE_INVALID_ARGUMENT;
      case 2026: return ERROR_CODE_INVALID_RULE_REFERENCE;
      case 2027: return ERROR_CODE_NOT_SUPPORTED_WALK;
      case 2028: return ERROR_CODE_MISSING_ARGUMENT;
      case 2029: return ERROR_CODE_ALREADY_EXIST;
      case 2030: return ERROR_CODE_MAX_DATA_PER_WRITE_EXCEEDED;
      case 4000: return ERROR_CODE_NOT_FOUND;
      case 4001: return ERROR_CODE_ENTITY_TYPE_NOT_FOUND;
      case 4002: return ERROR_CODE_PERMISSION_NOT_FOUND;
      case 4003: return ERROR_CODE_SCHEMA_NOT_FOUND;
      case 4004: return ERROR_CODE_SUBJECT_TYPE_NOT_FOUND;
      case 4005: return ERROR_CODE_ENTITY_DEFINITION_NOT_FOUND;
      case 4006: return ERROR_CODE_PERMISSION_DEFINITION_NOT_FOUND;
      case 4007: return ERROR_CODE_RELATION_DEFINITION_NOT_FOUND;
      case 4008: return ERROR_CODE_RECORD_NOT_FOUND;
      case 4009: return ERROR_CODE_TENANT_NOT_FOUND;
      case 4010: return ERROR_CODE_ATTRIBUTE_DEFINITION_NOT_FOUND;
      case 4011: return ERROR_CODE_ATTRIBUTE_TYPE_MISMATCH;
      case 4012: return ERROR_CODE_BUNDLE_NOT_FOUND;
      case 4013: return ERROR_CODE_RULE_DEFINITION_NOT_FOUND;
      case 4014: return ERROR_CODE_ENTITY_STATEMENT_NOT_FOUND;
      case 4015: return ERROR_CODE_REFERENCE_NOT_FOUND;
      case 5000: return ERROR_CODE_INTERNAL;
      case 5001: return ERROR_CODE_CANCELLED;
      case 5002: return ERROR_CODE_SQL_BUILDER;
      case 5003: return ERROR_CODE_CIRCUIT_BREAKER;
      case 5005: return ERROR_CODE_EXECUTION;
      case 5006: return ERROR_CODE_SCAN;
      case 5007: return ERROR_CODE_MIGRATION;
      case 5008: return ERROR_CODE_TYPE_CONVERSATION;
      case 5009: return ERROR_CODE_ERROR_MAX_RETRIES;
      case 5010: return ERROR_CODE_ROLLBACK;
      case 5011: return ERROR_CODE_EXCLUSION_REQUIRES_MORE_THAN_ONE_FUNCTION;
      case 5012: return ERROR_CODE_NOT_IMPLEMENTED;
      case 5013: return ERROR_CODE_DATASTORE;
      case 5014: return ERROR_CODE_UNKNOWN_STATEMENT_TYPE;
      case 5015: return ERROR_CODE_UNKNOWN_REFERENCE_TYPE;
      case 5016: return ERROR_CODE_CANNOT_CONVERT_TO_ENTITY_STATEMENT;
      case 5017: return ERROR_CODE_CANNOT_CONVERT_TO_RELATION_STATEMENT;
      case 5018: return ERROR_CODE_CANNOT_CONVERT_TO_ATTRIBUTE_STATEMENT;
      case 5019: return ERROR_CODE_SERIALIZATION;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
          public ErrorCode findValueByNumber(int number) {
            return ErrorCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.permify.grpc.ErrorsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorCode[] VALUES = values();

  public static ErrorCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:base.v1.ErrorCode)
}

