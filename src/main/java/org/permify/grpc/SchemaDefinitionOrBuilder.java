// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base/v1/base.proto
// Protobuf Java Version: 4.27.2

package org.permify.grpc;

public interface SchemaDefinitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:base.v1.SchemaDefinition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  int getEntityDefinitionsCount();
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  boolean containsEntityDefinitions(
      java.lang.String key);
  /**
   * Use {@link #getEntityDefinitionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition>
  getEntityDefinitions();
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  java.util.Map<java.lang.String, org.permify.grpc.EntityDefinition>
  getEntityDefinitionsMap();
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  /* nullable */
org.permify.grpc.EntityDefinition getEntityDefinitionsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.EntityDefinition defaultValue);
  /**
   * <pre>
   * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.EntityDefinition&gt; entity_definitions = 1 [json_name = "entityDefinitions"];</code>
   */
  org.permify.grpc.EntityDefinition getEntityDefinitionsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  int getRuleDefinitionsCount();
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  boolean containsRuleDefinitions(
      java.lang.String key);
  /**
   * Use {@link #getRuleDefinitionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition>
  getRuleDefinitions();
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  java.util.Map<java.lang.String, org.permify.grpc.RuleDefinition>
  getRuleDefinitionsMap();
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  /* nullable */
org.permify.grpc.RuleDefinition getRuleDefinitionsOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.RuleDefinition defaultValue);
  /**
   * <pre>
   * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.RuleDefinition&gt; rule_definitions = 2 [json_name = "ruleDefinitions"];</code>
   */
  org.permify.grpc.RuleDefinition getRuleDefinitionsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  int getReferencesCount();
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  boolean containsReferences(
      java.lang.String key);
  /**
   * Use {@link #getReferencesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
  getReferences();
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  java.util.Map<java.lang.String, org.permify.grpc.SchemaDefinition.Reference>
  getReferencesMap();
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  /* nullable */
org.permify.grpc.SchemaDefinition.Reference getReferencesOrDefault(
      java.lang.String key,
      /* nullable */
org.permify.grpc.SchemaDefinition.Reference         defaultValue);
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  org.permify.grpc.SchemaDefinition.Reference getReferencesOrThrow(
      java.lang.String key);
  /**
   * Use {@link #getReferencesValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getReferencesValue();
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getReferencesValueMap();
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  int getReferencesValueOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * Map of references to signify whether a string refers to an entity or a rule.
   * </pre>
   *
   * <code>map&lt;string, .base.v1.SchemaDefinition.Reference&gt; references = 3 [json_name = "references"];</code>
   */
  int getReferencesValueOrThrow(
      java.lang.String key);
}
