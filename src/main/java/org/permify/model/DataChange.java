/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.permify.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.permify.model.Attribute;
import org.permify.model.DataChangeOperation;
import org.permify.model.Tuple;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DataChange represents a single change in data, with an operation type and the actual change which could be a tuple or an attribute.
 */
@JsonPropertyOrder({
  DataChange.JSON_PROPERTY_OPERATION,
  DataChange.JSON_PROPERTY_TUPLE,
  DataChange.JSON_PROPERTY_ATTRIBUTE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T12:59:35.606772+03:00[Europe/Istanbul]", comments = "Generator version: 7.7.0")
public class DataChange {
  public static final String JSON_PROPERTY_OPERATION = "operation";
  private DataChangeOperation operation = DataChangeOperation.UNSPECIFIED;

  public static final String JSON_PROPERTY_TUPLE = "tuple";
  private Tuple tuple;

  public static final String JSON_PROPERTY_ATTRIBUTE = "attribute";
  private Attribute attribute;

  public DataChange() {
  }

  public DataChange operation(DataChangeOperation operation) {
    
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataChangeOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(DataChangeOperation operation) {
    this.operation = operation;
  }

  public DataChange tuple(Tuple tuple) {
    
    this.tuple = tuple;
    return this;
  }

  /**
   * Get tuple
   * @return tuple
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TUPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tuple getTuple() {
    return tuple;
  }


  @JsonProperty(JSON_PROPERTY_TUPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTuple(Tuple tuple) {
    this.tuple = tuple;
  }

  public DataChange attribute(Attribute attribute) {
    
    this.attribute = attribute;
    return this;
  }

  /**
   * Get attribute
   * @return attribute
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Attribute getAttribute() {
    return attribute;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttribute(Attribute attribute) {
    this.attribute = attribute;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataChange dataChange = (DataChange) o;
    return Objects.equals(this.operation, dataChange.operation) &&
        Objects.equals(this.tuple, dataChange.tuple) &&
        Objects.equals(this.attribute, dataChange.attribute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, tuple, attribute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataChange {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    tuple: ").append(toIndentedString(tuple)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

