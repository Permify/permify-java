/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.permify.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.permify.model.RelationshipReadRequestMetadata;
import org.permify.model.TupleFilter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RelationshipReadRequest defines the structure of a request for reading relationships. It contains the necessary information such as tenant_id, metadata, and filter for the read operation.
 */
@JsonPropertyOrder({
  DataRelationshipsReadRequest.JSON_PROPERTY_METADATA,
  DataRelationshipsReadRequest.JSON_PROPERTY_FILTER,
  DataRelationshipsReadRequest.JSON_PROPERTY_PAGE_SIZE,
  DataRelationshipsReadRequest.JSON_PROPERTY_CONTINUOUS_TOKEN
})
@JsonTypeName("data_relationships_read_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T12:59:35.606772+03:00[Europe/Istanbul]", comments = "Generator version: 7.7.0")
public class DataRelationshipsReadRequest {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private RelationshipReadRequestMetadata metadata;

  public static final String JSON_PROPERTY_FILTER = "filter";
  private TupleFilter filter;

  public static final String JSON_PROPERTY_PAGE_SIZE = "page_size";
  private Long pageSize;

  public static final String JSON_PROPERTY_CONTINUOUS_TOKEN = "continuous_token";
  private String continuousToken;

  public DataRelationshipsReadRequest() {
  }

  public DataRelationshipsReadRequest metadata(RelationshipReadRequestMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RelationshipReadRequestMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(RelationshipReadRequestMetadata metadata) {
    this.metadata = metadata;
  }

  public DataRelationshipsReadRequest filter(TupleFilter filter) {
    
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TupleFilter getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(TupleFilter filter) {
    this.filter = filter;
  }

  public DataRelationshipsReadRequest pageSize(Long pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

  /**
   * page_size specifies the number of results to return in a single page. If more results are available, a continuous_token is included in the response.
   * @return pageSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPageSize() {
    return pageSize;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageSize(Long pageSize) {
    this.pageSize = pageSize;
  }

  public DataRelationshipsReadRequest continuousToken(String continuousToken) {
    
    this.continuousToken = continuousToken;
    return this;
  }

  /**
   * continuous_token is used in case of paginated reads to get the next page of results.
   * @return continuousToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTINUOUS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContinuousToken() {
    return continuousToken;
  }


  @JsonProperty(JSON_PROPERTY_CONTINUOUS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContinuousToken(String continuousToken) {
    this.continuousToken = continuousToken;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRelationshipsReadRequest dataRelationshipsReadRequest = (DataRelationshipsReadRequest) o;
    return Objects.equals(this.metadata, dataRelationshipsReadRequest.metadata) &&
        Objects.equals(this.filter, dataRelationshipsReadRequest.filter) &&
        Objects.equals(this.pageSize, dataRelationshipsReadRequest.pageSize) &&
        Objects.equals(this.continuousToken, dataRelationshipsReadRequest.continuousToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, filter, pageSize, continuousToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRelationshipsReadRequest {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    continuousToken: ").append(toIndentedString(continuousToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

