/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.permify.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.permify.model.V1Operation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DataBundle is a message representing a bundle of data, which includes a name, a list of arguments, and a series of operations.
 */
@JsonPropertyOrder({
  DataBundle.JSON_PROPERTY_NAME,
  DataBundle.JSON_PROPERTY_ARGUMENTS,
  DataBundle.JSON_PROPERTY_OPERATIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T12:59:35.606772+03:00[Europe/Istanbul]", comments = "Generator version: 7.7.0")
public class DataBundle {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ARGUMENTS = "arguments";
  private List<String> arguments = new ArrayList<>();

  public static final String JSON_PROPERTY_OPERATIONS = "operations";
  private List<V1Operation> operations = new ArrayList<>();

  public DataBundle() {
  }

  public DataBundle name(String name) {
    
    this.name = name;
    return this;
  }

  /**
   * &#39;name&#39; is a simple string field representing the name of the DataBundle.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public DataBundle arguments(List<String> arguments) {
    
    this.arguments = arguments;
    return this;
  }

  public DataBundle addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

  /**
   * &#39;arguments&#39; is a repeated field, which means it can contain multiple strings. These are used to store a list of arguments related to the DataBundle.
   * @return arguments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getArguments() {
    return arguments;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }

  public DataBundle operations(List<V1Operation> operations) {
    
    this.operations = operations;
    return this;
  }

  public DataBundle addOperationsItem(V1Operation operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * &#39;operations&#39; is a repeated field containing multiple Operation messages. Each Operation represents a specific action or set of actions to be performed.
   * @return operations
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<V1Operation> getOperations() {
    return operations;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperations(List<V1Operation> operations) {
    this.operations = operations;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBundle dataBundle = (DataBundle) o;
    return Objects.equals(this.name, dataBundle.name) &&
        Objects.equals(this.arguments, dataBundle.arguments) &&
        Objects.equals(this.operations, dataBundle.operations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arguments, operations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBundle {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

