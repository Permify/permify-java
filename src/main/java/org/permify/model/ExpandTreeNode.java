/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.permify.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.permify.model.Expand;
import org.permify.model.ExpandTreeNodeOperation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ExpandTreeNode represents a node in an expansion tree with a specific operation and its children.
 */
@JsonPropertyOrder({
  ExpandTreeNode.JSON_PROPERTY_OPERATION,
  ExpandTreeNode.JSON_PROPERTY_CHILDREN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T12:59:35.606772+03:00[Europe/Istanbul]", comments = "Generator version: 7.7.0")
public class ExpandTreeNode {
  public static final String JSON_PROPERTY_OPERATION = "operation";
  private ExpandTreeNodeOperation operation = ExpandTreeNodeOperation.UNSPECIFIED;

  public static final String JSON_PROPERTY_CHILDREN = "children";
  private List<Expand> children = new ArrayList<>();

  public ExpandTreeNode() {
  }

  public ExpandTreeNode operation(ExpandTreeNodeOperation operation) {
    
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExpandTreeNodeOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(ExpandTreeNodeOperation operation) {
    this.operation = operation;
  }

  public ExpandTreeNode children(List<Expand> children) {
    
    this.children = children;
    return this;
  }

  public ExpandTreeNode addChildrenItem(Expand childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Expand> getChildren() {
    return children;
  }


  @JsonProperty(JSON_PROPERTY_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChildren(List<Expand> children) {
    this.children = children;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpandTreeNode expandTreeNode = (ExpandTreeNode) o;
    return Objects.equals(this.operation, expandTreeNode.operation) &&
        Objects.equals(this.children, expandTreeNode.children);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, children);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpandTreeNode {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

