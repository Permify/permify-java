/*
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v1.0.3
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package co.permify.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import co.permify.sdk.model.RelationshipReadRequestMetadata;
import co.permify.sdk.model.TupleFilter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import co.permify.sdk.client.ApiClient;
/**
 * RelationshipReadRequest defines the structure of a request for reading relationships. It contains the necessary information such as tenant_id, metadata, and filter for the read operation.
 */
@JsonPropertyOrder({
  ReadRelationshipsBody.JSON_PROPERTY_METADATA,
  ReadRelationshipsBody.JSON_PROPERTY_FILTER,
  ReadRelationshipsBody.JSON_PROPERTY_PAGE_SIZE,
  ReadRelationshipsBody.JSON_PROPERTY_CONTINUOUS_TOKEN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class ReadRelationshipsBody {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  @jakarta.annotation.Nullable
  private RelationshipReadRequestMetadata metadata;

  public static final String JSON_PROPERTY_FILTER = "filter";
  @jakarta.annotation.Nullable
  private TupleFilter filter;

  public static final String JSON_PROPERTY_PAGE_SIZE = "page_size";
  @jakarta.annotation.Nullable
  private Long pageSize;

  public static final String JSON_PROPERTY_CONTINUOUS_TOKEN = "continuous_token";
  @jakarta.annotation.Nullable
  private String continuousToken;

  public ReadRelationshipsBody() { 
  }

  public ReadRelationshipsBody metadata(@jakarta.annotation.Nullable RelationshipReadRequestMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RelationshipReadRequestMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@jakarta.annotation.Nullable RelationshipReadRequestMetadata metadata) {
    this.metadata = metadata;
  }


  public ReadRelationshipsBody filter(@jakarta.annotation.Nullable TupleFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TupleFilter getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(@jakarta.annotation.Nullable TupleFilter filter) {
    this.filter = filter;
  }


  public ReadRelationshipsBody pageSize(@jakarta.annotation.Nullable Long pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * page_size specifies the number of results to return in a single page. If more results are available, a continuous_token is included in the response.
   * @return pageSize
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getPageSize() {
    return pageSize;
  }


  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageSize(@jakarta.annotation.Nullable Long pageSize) {
    this.pageSize = pageSize;
  }


  public ReadRelationshipsBody continuousToken(@jakarta.annotation.Nullable String continuousToken) {
    this.continuousToken = continuousToken;
    return this;
  }

  /**
   * continuous_token is used in case of paginated reads to get the next page of results.
   * @return continuousToken
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTINUOUS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContinuousToken() {
    return continuousToken;
  }


  @JsonProperty(JSON_PROPERTY_CONTINUOUS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContinuousToken(@jakarta.annotation.Nullable String continuousToken) {
    this.continuousToken = continuousToken;
  }


  /**
   * Return true if this ReadRelationshipsBody object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadRelationshipsBody readRelationshipsBody = (ReadRelationshipsBody) o;
    return Objects.equals(this.metadata, readRelationshipsBody.metadata) &&
        Objects.equals(this.filter, readRelationshipsBody.filter) &&
        Objects.equals(this.pageSize, readRelationshipsBody.pageSize) &&
        Objects.equals(this.continuousToken, readRelationshipsBody.continuousToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, filter, pageSize, continuousToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadRelationshipsBody {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    continuousToken: ").append(toIndentedString(continuousToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(getMetadata().toUrlQueryString(prefix + "metadata" + suffix));
    }

    // add `filter` to the URL query string
    if (getFilter() != null) {
      joiner.add(getFilter().toUrlQueryString(prefix + "filter" + suffix));
    }

    // add `page_size` to the URL query string
    if (getPageSize() != null) {
      joiner.add(String.format("%spage_size%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPageSize()))));
    }

    // add `continuous_token` to the URL query string
    if (getContinuousToken() != null) {
      joiner.add(String.format("%scontinuous_token%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContinuousToken()))));
    }

    return joiner.toString();
  }
}

