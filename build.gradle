plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'eclipse'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'cl.franciscosolis.sonatype-central-upload' version '1.0.3'
}

group = 'co.permify'
version = '1.4.2'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
}

// Disable Gradle module metadata (not needed for Maven Central)
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'co.permify'
            artifactId = 'permify-java'
            version = project.version
            
            from components.java
            
            pom {
                name = 'Permify Java'
                description = 'Java SDK for Permify - Authorization as a Service'
                url = 'https://github.com/Permify/permify-java'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                
                developers {
                    developer {
                        id = 'permify'
                        name = 'Permify Team'
                        email = 'hello@permify.co'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/Permify/permify-java.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Permify/permify-java.git'
                    url = 'https://github.com/Permify/permify-java'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "CentralPortal"
            url = "https://central.sonatype.com/api/v1/publisher/upload"
            credentials {
                username = project.findProperty("centralUsername") ?: System.getenv("CENTRAL_USERNAME")
                password = project.findProperty("centralPassword") ?: System.getenv("CENTRAL_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

sonatypeCentralUpload {
    username = project.findProperty("centralUsername") ?: System.getenv("CENTRAL_USERNAME")
    password = project.findProperty("centralPassword") ?: System.getenv("CENTRAL_PASSWORD")
    
    pom = file("pom.xml")

    archives = files(
        jar.archiveFile,
        sourcesJar.archiveFile,
        javadocJar.archiveFile
    )
    
    signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    signingKeyPassphrase = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")
    
    publishingType = "AUTOMATIC"
}

task execute(type: JavaExec) {
    mainClass = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

ext {
    jackson_version = "2.17.1"
    jakarta_annotation_version = "2.1.1"
    beanvalidation_version = "3.0.2"
    junit_version = "4.13.2"
}

dependencies {
        implementation "com.google.code.findbugs:jsr305:3.0.2"
        implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
        implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
        implementation "org.openapitools:jackson-databind-nullable:0.2.1"
        implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation "junit:junit:$junit_version"   
}

spotless {
    enforceCheck = false
    
    format 'misc', {
        target '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    
    java {
        googleJavaFormat('1.8').aosp().reflowLongStrings()
        removeUnusedImports()
        importOrder()
    }
}
